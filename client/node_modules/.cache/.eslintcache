[{"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\index.js":"1","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\reportWebVitals.js":"2","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\App.js":"3","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\history.js":"4","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\login.component.js":"5","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\RegisterSeller.js":"6","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\RegisterBuyer.js":"7","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\Help.js":"8","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\layouts\\Admin\\Seller.js":"9","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\layouts\\Admin\\Admin.js":"10","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\layouts\\Admin\\LI.js":"11","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\components\\BackgroundColorWrapper\\BackgroundColorWrapper.js":"12","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\components\\ThemeWrapper\\ThemeWrapper.js":"13","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\ipfs.js":"14","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\getWeb3.js":"15","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\routeseller.js":"16","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\routes.js":"17","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\routesLI.js":"18","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\components\\Navbars\\AdminNavbar.js":"19","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\components\\FixedPlugin\\FixedPlugin.js":"20","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\components\\Sidebar\\Sidebar.js":"21","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\LIDashboard.js":"22","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\SellerDashboard.js":"23","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\Dashboard.js":"24","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\components\\Footer\\Footer.js":"25","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\contexts\\BackgroundColorContext.js":"26","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\contexts\\ThemeContext.js":"27","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\viewImage.js":"28","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\sellerProfile.js":"29","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\ApproveRequest.js":"30","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\MakePayment.js":"31","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\AddLand.js":"32","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\updateSeller.js":"33","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\updateBuyer.js":"34","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\buyerProfile.js":"35","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\ApproveTransaction.js":"36","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\OwnedLands.js":"37","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\BuyerInfo.js":"38","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\SellerInfo.js":"39","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\TransactionInfo.js":"40","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\3Dmodelling.js":"41"},{"size":1747,"mtime":1676651690000,"results":"42","hashOfConfig":"43"},{"size":375,"mtime":1676651690000,"results":"44","hashOfConfig":"43"},{"size":552,"mtime":1676651690000,"results":"45","hashOfConfig":"43"},{"size":89,"mtime":1676651690000,"results":"46","hashOfConfig":"43"},{"size":6392,"mtime":1684598062659,"results":"47","hashOfConfig":"43"},{"size":10598,"mtime":1684598702807,"results":"48","hashOfConfig":"43"},{"size":12201,"mtime":1684598651812,"results":"49","hashOfConfig":"43"},{"size":2585,"mtime":1684125738543,"results":"50","hashOfConfig":"43"},{"size":4150,"mtime":1676651690000,"results":"51","hashOfConfig":"43"},{"size":4140,"mtime":1676651690000,"results":"52","hashOfConfig":"43"},{"size":4122,"mtime":1676658188000,"results":"53","hashOfConfig":"43"},{"size":522,"mtime":1676651690000,"results":"54","hashOfConfig":"43"},{"size":730,"mtime":1676651690000,"results":"55","hashOfConfig":"43"},{"size":461,"mtime":1685384462055,"results":"56","hashOfConfig":"43"},{"size":1214,"mtime":1676651690000,"results":"57","hashOfConfig":"43"},{"size":1638,"mtime":1676651690000,"results":"58","hashOfConfig":"43"},{"size":1607,"mtime":1676651690000,"results":"59","hashOfConfig":"43"},{"size":1073,"mtime":1676651690000,"results":"60","hashOfConfig":"43"},{"size":3577,"mtime":1676651690000,"results":"61","hashOfConfig":"43"},{"size":3697,"mtime":1677824177989,"results":"62","hashOfConfig":"43"},{"size":4663,"mtime":1676651690000,"results":"63","hashOfConfig":"43"},{"size":8629,"mtime":1676651690000,"results":"64","hashOfConfig":"43"},{"size":10217,"mtime":1676651692000,"results":"65","hashOfConfig":"43"},{"size":10940,"mtime":1676651692000,"results":"66","hashOfConfig":"43"},{"size":462,"mtime":1676651690000,"results":"67","hashOfConfig":"43"},{"size":266,"mtime":1676651690000,"results":"68","hashOfConfig":"43"},{"size":213,"mtime":1676651690000,"results":"69","hashOfConfig":"43"},{"size":6962,"mtime":1685511894537,"results":"70","hashOfConfig":"43"},{"size":6567,"mtime":1677922375379,"results":"71","hashOfConfig":"43"},{"size":5676,"mtime":1676651692000,"results":"72","hashOfConfig":"43"},{"size":5541,"mtime":1684046605111,"results":"73","hashOfConfig":"43"},{"size":10955,"mtime":1685510458825,"results":"74","hashOfConfig":"43"},{"size":11483,"mtime":1677824679721,"results":"75","hashOfConfig":"43"},{"size":8931,"mtime":1677824789441,"results":"76","hashOfConfig":"43"},{"size":6384,"mtime":1677922416473,"results":"77","hashOfConfig":"43"},{"size":5053,"mtime":1676651692000,"results":"78","hashOfConfig":"43"},{"size":6261,"mtime":1676651692000,"results":"79","hashOfConfig":"43"},{"size":8606,"mtime":1677922436471,"results":"80","hashOfConfig":"43"},{"size":8025,"mtime":1677922363674,"results":"81","hashOfConfig":"43"},{"size":8360,"mtime":1676651692000,"results":"82","hashOfConfig":"43"},{"size":1049,"mtime":1684247123164,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},"120rtti",{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"87"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"87"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"87"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"87"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"87"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"87"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"87"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"87"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":"136","usedDeprecatedRules":"87"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"87"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"87"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"87"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"87"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"87"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"87"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"87"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"87"},"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\index.js",["186","187"],"import React from 'react';\r\nimport Login from \"./login.component\";\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport history from './history';\r\nimport RegisterBuyer from \"./RegisterBuyer\";\r\nimport RegisterSeller from \"./RegisterSeller\";\r\nimport AdminLayout from \"./layouts/Admin/Admin\";\r\nimport LI from \"./layouts/Admin/LI\";\r\nimport Seller from \"./layouts/Admin/Seller\";\r\nimport \"./assets/scss/black-dashboard-react.scss\";\r\nimport \"./assets/demo/demo.css\";\r\nimport \"./assets/css/nucleo-icons.css\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport ThemeContextWrapper from \"./components/ThemeWrapper/ThemeWrapper\";\r\nimport BackgroundColorWrapper from \"./components/BackgroundColorWrapper/BackgroundColorWrapper\";\r\nimport Help from './Help';\r\n\r\nReactDOM.render(\r\n  <ThemeContextWrapper>\r\n    <BackgroundColorWrapper>\r\n      <Router history={history}>\r\n        <Switch>\r\n          <Route exact path='/' component={Login} />\r\n          <Route path=\"/RegisterBuyer\" component={RegisterBuyer} />\r\n          <Route path=\"/RegisterSeller\" component={RegisterSeller} />\r\n          <Route path=\"/admin\" render={(props) => <AdminLayout {...props} />} />\r\n          <Route path=\"/LI\" render={(props) => <LI {...props} />} />\r\n          <Route path=\"/Seller\" render={(props) => <Seller {...props} />} />\r\n          <Route exact path='/Help' component={Help} />\r\n\r\n        </Switch>\r\n      </Router>\r\n    </BackgroundColorWrapper>\r\n  </ThemeContextWrapper>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n",["188","189"],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\reportWebVitals.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\App.js",["190"],"import {\r\n    ContractData\r\n} from '@drizzle/react-components';\r\nimport React from 'react';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport Land from './artifacts/Land.json';\r\nimport './index.css';\r\n\r\n\r\nconst drizzleOptions = {\r\n    contracts: [Land]\r\n}\r\n\r\nvar rows = [];\r\nfor (var i = 1; i < 5; i++) {\r\n    rows.push(<ContractData contract=\"Land\" method=\"getArea\" methodArgs={[i, { from: \"0xe0786c396EEf88a42782cfd63D2329cA14b62C4C\" }]} />);\r\n}\r\n\r\nfunction App() {\r\n    return (\r\n        <></>\r\n    );\r\n}\r\nexport default App;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\history.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\login.component.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\RegisterSeller.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\RegisterBuyer.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\Help.js",["191"],"import React from \"react\";\r\nimport Faq from \"react-faq-component\";\r\nimport \"../node_modules/video-react/dist/video-react.css\";\r\nimport './help.css';\r\nimport './index.css';\r\n// import video from \"../src/assets/img/video.mkv\";\r\n\r\nconst data = {\r\n    title: \"FAQ (How the System works)\",\r\n    rows: [\r\n        {\r\n            title: \"What are the prerequisites for using the system?\",\r\n            content: \"You need Metamask Browser Extension added and Ganache for running the system on a local Ethereum Blockchain.\",\r\n        },\r\n        {\r\n            title: \"How can I understand the working of the system?\",\r\n            content:\r\n                \"You can watch the demo video uploaded above on this page.\",\r\n        },\r\n        {\r\n            title: \"What do I register for?\",\r\n            content: \"If you own a land and want to sell it, Register as a Buyer and if you want to buy a land, Register as a Buyer.\",\r\n        },\r\n        {\r\n            title: \"Why can't I request for a Land Property after registering as Buyer?\",\r\n            content: \"Your account profile and documents will first be verified by the Land Inspector and then you can request a Land.\",\r\n        },\r\n        {\r\n            title: \"Why can't I add a Land Property after registering as Seller?\",\r\n            content: \"Same answer as above!\",\r\n        },\r\n        {\r\n            title: \"Who has created this project?\",\r\n            content: \"This is a  project built by Team Mescoe. You can reach out to us in case of any queries!\",\r\n        },\r\n    ],\r\n};\r\n\r\nconst styles = {\r\n    bgColor: 'dark',\r\n    titleTextColor: \"black\",\r\n    rowTitleColor: \"grey\",\r\n    rowContentPaddingBottom: '10px',\r\n    transitionDuration: \"0.5s\",\r\n    timingFunc: \"ease\",\r\n    //rowContentColor: 'grey',\r\n    //arrowColor: \"black\",\r\n};\r\n\r\nconst config = {\r\n    // animate: true,\r\n    // arrowIcon: \"V\",\r\n    // tabFocus: true\r\n};\r\n\r\nexport default function Help() {\r\n    return (\r\n        <>\r\n            <div id=\"container\" >\r\n                <div id=\"topSection\">\r\n                    <div id=\"searchSection\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n                <h1></h1>\r\n                <div className=\"\">\r\n                   \r\n                </div>\r\n\r\n                <div style={{ marginTop: \"10px\" }}>\r\n                    <Faq\r\n                        data={data}\r\n                        styles={styles}\r\n                        config={config}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\layouts\\Admin\\Seller.js",["192","193"],"\r\nimport React from \"react\";\r\nimport { Route, Switch, Redirect, useLocation } from \"react-router-dom\";\r\n// javascript plugin used to create scrollbars on windows\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\n\r\n// core components\r\nimport AdminNavbar from \"../../components/Navbars/AdminNavbar\";\r\nimport Sidebar from \"../../components/Sidebar/Sidebar\";\r\nimport FixedPlugin from \"../../components/FixedPlugin/FixedPlugin\";\r\nimport SDash from  \"../../views/SellerDashboard\";\r\nimport routes from \"../../routeseller\";\r\nimport Footer from \"../../components/Footer/Footer\";\r\nimport logo from \"../../assets/img/react-logo.png\";\r\nimport { BackgroundColorContext } from \"../../contexts/BackgroundColorContext\";\r\n\r\nvar ps;\r\n\r\nfunction Seller(props) {\r\n  const location = useLocation();\r\n  const mainPanelRef = React.useRef(null);\r\n  const [sidebarOpened, setsidebarOpened] = React.useState(\r\n    document.documentElement.className.indexOf(\"nav-open\") !== -1\r\n  );\r\n  React.useEffect(() => {\r\n    if (navigator.platform.indexOf(\"Win\") > -1) {\r\n      document.documentElement.className += \" perfect-scrollbar-on\";\r\n      document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n      ps = new PerfectScrollbar(mainPanelRef.current, {\r\n        suppressScrollX: true,\r\n      });\r\n      let tables = document.querySelectorAll(\".table-responsive\");\r\n      for (let i = 0; i < tables.length; i++) {\r\n        ps = new PerfectScrollbar(tables[i]);\r\n      }\r\n    }\r\n    // Specify how to clean up after this effect:\r\n    return function cleanup() {\r\n      if (navigator.platform.indexOf(\"Win\") > -1) {\r\n        ps.destroy();\r\n        document.documentElement.classList.add(\"perfect-scrollbar-off\");\r\n        document.documentElement.classList.remove(\"perfect-scrollbar-on\");\r\n      }\r\n    };\r\n  });\r\n  React.useEffect(() => {\r\n    if (navigator.platform.indexOf(\"Win\") > -1) {\r\n      let tables = document.querySelectorAll(\".table-responsive\");\r\n      for (let i = 0; i < tables.length; i++) {\r\n        ps = new PerfectScrollbar(tables[i]);\r\n      }\r\n    }\r\n    document.documentElement.scrollTop = 0;\r\n    document.scrollingElement.scrollTop = 0;\r\n    if (mainPanelRef.current) {\r\n      mainPanelRef.current.scrollTop = 0;\r\n    }\r\n  }, [location]);\r\n  // // this function opens and closes the sidebar on small devices\r\n  const toggleSidebar = () => {\r\n    document.documentElement.classList.toggle(\"nav-open\");\r\n    setsidebarOpened(!sidebarOpened);\r\n  };\r\n  const getRoutes = (routes) => {\r\n    return routes.map((prop, key) => {\r\n      if (prop.layout === \"/Seller\") {\r\n        return (\r\n          <Route\r\n            path={prop.layout + prop.path}\r\n            component={prop.component}\r\n            key={key}\r\n          />\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  };\r\n  \r\n  const getBrandText = (path) => {\r\n    for (let i = 0; i < routes.length; i++) {\r\n      if (location.pathname.indexOf(routes[i].layout + routes[i].path) !== -1) {\r\n        return routes[i].name;\r\n      }\r\n    }\r\n    return \"Brand\";\r\n  };\r\n  return (\r\n    <BackgroundColorContext.Consumer>\r\n      {({ color, changeColor }) => (\r\n        <React.Fragment>\r\n          <div className=\"wrapper\">\r\n            <Sidebar\r\n              routes={routes}\r\n              logo={{\r\n                outterLink: \"#\",\r\n                text: \"Land Registration\",\r\n                imgSrc: logo,\r\n              }}\r\n              toggleSidebar={toggleSidebar}\r\n            />\r\n            <div className=\"main-panel\" ref={mainPanelRef} data={color}>\r\n            <AdminNavbar\r\n                brandText={getBrandText(location.pathname)}\r\n                toggleSidebar={toggleSidebar}\r\n                sidebarOpened={sidebarOpened}\r\n              />\r\n              <Switch>\r\n                {getRoutes(routes)}\r\n                <Redirect from=\"*\" to=\"/Seller/SellerDashboard\" />\r\n              </Switch>\r\n              <Footer fluid />\r\n\r\n            </div>\r\n          </div>\r\n          {/* <FixedPlugin bgColor={color} handleBgClick={changeColor} /> */}\r\n        </React.Fragment>\r\n      )}\r\n    </BackgroundColorContext.Consumer>\r\n  );\r\n}\r\n\r\nexport default Seller;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\layouts\\Admin\\Admin.js",["194","195","196"],"\r\nimport React from \"react\";\r\nimport { Route, Switch, Redirect, useLocation } from \"react-router-dom\";\r\n// javascript plugin used to create scrollbars on windows\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\n\r\n// core components\r\nimport AdminNavbar from \"../../components/Navbars/AdminNavbar\";\r\nimport Footer from \"../../components/Footer/Footer\";\r\nimport Sidebar from \"../../components/Sidebar/Sidebar\";\r\nimport FixedPlugin from \"../../components/FixedPlugin/FixedPlugin\";\r\nimport Dashboard from \"../../views/Dashboard\";\r\nimport routes from \"../../routes\";\r\n\r\nimport logo from \"../../assets/img/react-logo.png\";\r\nimport { BackgroundColorContext } from \"../../contexts/BackgroundColorContext\";\r\n\r\nvar ps;\r\n\r\nfunction Admin(props) {\r\n  const location = useLocation();\r\n  const mainPanelRef = React.useRef(null);\r\n  const [sidebarOpened, setsidebarOpened] = React.useState(\r\n    document.documentElement.className.indexOf(\"nav-open\") !== -1\r\n  );\r\n  React.useEffect(() => {\r\n    if (navigator.platform.indexOf(\"Win\") > -1) {\r\n      document.documentElement.className += \" perfect-scrollbar-on\";\r\n      document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n      ps = new PerfectScrollbar(mainPanelRef.current, {\r\n        suppressScrollX: true,\r\n      });\r\n      let tables = document.querySelectorAll(\".table-responsive\");\r\n      for (let i = 0; i < tables.length; i++) {\r\n        ps = new PerfectScrollbar(tables[i]);\r\n      }\r\n    }\r\n    // Specify how to clean up after this effect:\r\n    return function cleanup() {\r\n      if (navigator.platform.indexOf(\"Win\") > -1) {\r\n        ps.destroy();\r\n        document.documentElement.classList.add(\"perfect-scrollbar-off\");\r\n        document.documentElement.classList.remove(\"perfect-scrollbar-on\");\r\n      }\r\n    };\r\n  });\r\n  React.useEffect(() => {\r\n    if (navigator.platform.indexOf(\"Win\") > -1) {\r\n      let tables = document.querySelectorAll(\".table-responsive\");\r\n      for (let i = 0; i < tables.length; i++) {\r\n        ps = new PerfectScrollbar(tables[i]);\r\n      }\r\n    }\r\n    document.documentElement.scrollTop = 0;\r\n    document.scrollingElement.scrollTop = 0;\r\n    if (mainPanelRef.current) {\r\n      mainPanelRef.current.scrollTop = 0;\r\n    }\r\n  }, [location]);\r\n  // // this function opens and closes the sidebar on small devices\r\n  const toggleSidebar = () => {\r\n    document.documentElement.classList.toggle(\"nav-open\");\r\n    setsidebarOpened(!sidebarOpened);\r\n  };\r\n  const getRoutes = (routes) => {\r\n    return routes.map((prop, key) => {\r\n      if (prop.layout === \"/admin\") {\r\n        return (\r\n          <Route\r\n            path={prop.layout + prop.path}\r\n            component={prop.component}\r\n            key={key}\r\n          />\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  };\r\n  \r\n  const getBrandText = (path) => {\r\n    for (let i = 0; i < routes.length; i++) {\r\n      if (location.pathname.indexOf(routes[i].layout + routes[i].path) !== -1) {\r\n        return routes[i].name;\r\n      }\r\n    }\r\n    return \"Brand\";\r\n  };\r\n\r\n  return (\r\n    <BackgroundColorContext.Consumer>\r\n      {({ color, changeColor }) => (\r\n        <React.Fragment>\r\n          <div className=\"wrapper\">\r\n          <Sidebar\r\n              routes={routes}\r\n              logo={{\r\n                outterLink: \"#\",\r\n                text: \"Land Registration\",\r\n                imgSrc: logo,\r\n              }}\r\n              toggleSidebar={toggleSidebar}\r\n            />\r\n            <div className=\"main-panel\" ref={mainPanelRef} data={color}>\r\n            <AdminNavbar\r\n                brandText={getBrandText(location.pathname)}\r\n                toggleSidebar={toggleSidebar}\r\n                sidebarOpened={sidebarOpened}\r\n              />\r\n              <Switch>\r\n                {getRoutes(routes)}\r\n                {/* <Redirect from=\"*\" to=\"/admin/dashboard\" /> */}\r\n              </Switch>\r\n              <Footer fluid />\r\n            </div>\r\n          </div>\r\n          {/* <FixedPlugin bgColor={color} handleBgClick={changeColor} /> */}\r\n        </React.Fragment>\r\n      )}\r\n    </BackgroundColorContext.Consumer>\r\n  );\r\n}\r\n\r\nexport default Admin;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\layouts\\Admin\\LI.js",["197"],"\r\nimport React from \"react\";\r\nimport { Route, Switch, Redirect, useLocation } from \"react-router-dom\";\r\n// javascript plugin used to create scrollbars on windows\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\n\r\n// core components\r\nimport AdminNavbar from \"../../components/Navbars/AdminNavbar\";\r\nimport Footer from \"../../components/Footer/Footer\";\r\nimport Sidebar from \"../../components/Sidebar/Sidebar\";\r\nimport FixedPlugin from \"../../components/FixedPlugin/FixedPlugin\";\r\nimport LIDashboard from \"../../views/LIDashboard\";\r\nimport routes from \"../../routesLI\";\r\n\r\nimport logo from \"../../assets/img/react-logo.png\";\r\nimport { BackgroundColorContext } from \"../../contexts/BackgroundColorContext\";\r\n\r\nvar ps;\r\n\r\nfunction LI(props) {\r\n  const location = useLocation();\r\n  const mainPanelRef = React.useRef(null);\r\n  const [sidebarOpened, setsidebarOpened] = React.useState(\r\n    document.documentElement.className.indexOf(\"nav-open\") !== -1\r\n  );\r\n  React.useEffect(() => {\r\n    if (navigator.platform.indexOf(\"Win\") > -1) {\r\n      document.documentElement.className += \" perfect-scrollbar-on\";\r\n      document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n      ps = new PerfectScrollbar(mainPanelRef.current, {\r\n        suppressScrollX: true,\r\n      });\r\n      let tables = document.querySelectorAll(\".table-responsive\");\r\n      for (let i = 0; i < tables.length; i++) {\r\n        ps = new PerfectScrollbar(tables[i]);\r\n      }\r\n    }\r\n    // Specify how to clean up after this effect:\r\n    return function cleanup() {\r\n      if (navigator.platform.indexOf(\"Win\") > -1) {\r\n        ps.destroy();\r\n        document.documentElement.classList.add(\"perfect-scrollbar-off\");\r\n        document.documentElement.classList.remove(\"perfect-scrollbar-on\");\r\n      }\r\n    };\r\n  });\r\n  React.useEffect(() => {\r\n    if (navigator.platform.indexOf(\"Win\") > -1) {\r\n      let tables = document.querySelectorAll(\".table-responsive\");\r\n      for (let i = 0; i < tables.length; i++) {\r\n        ps = new PerfectScrollbar(tables[i]);\r\n      }\r\n    }\r\n    document.documentElement.scrollTop = 0;\r\n    document.scrollingElement.scrollTop = 0;\r\n    if (mainPanelRef.current) {\r\n      mainPanelRef.current.scrollTop = 0;\r\n    }\r\n  }, [location]);\r\n  // // this function opens and closes the sidebar on small devices\r\n  const toggleSidebar = () => {\r\n    document.documentElement.classList.toggle(\"nav-open\");\r\n    setsidebarOpened(!sidebarOpened);\r\n  };\r\n  const getRoutes = (routes) => {\r\n    return routes.map((prop, key) => {\r\n      if (prop.layout === \"/LI\") {\r\n        return (\r\n          <Route\r\n            path={prop.layout + prop.path}\r\n            component={prop.component}\r\n            key={key}\r\n          />\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  };\r\n  \r\n  const getBrandText = (path) => {\r\n    for (let i = 0; i < routes.length; i++) {\r\n      if (location.pathname.indexOf(routes[i].layout + routes[i].path) !== -1) {\r\n        return routes[i].name;\r\n      }\r\n    }\r\n    return \"Brand\";\r\n  };\r\n  return (\r\n    <BackgroundColorContext.Consumer>\r\n      {({ color, changeColor }) => (\r\n        <React.Fragment>\r\n          <div className=\"wrapper\">\r\n            <Sidebar\r\n              routes={routes}\r\n              logo={{\r\n                outterLink: \"#\",\r\n                text: \"Land Registration\",\r\n                imgSrc: logo,\r\n              }}\r\n              toggleSidebar={toggleSidebar}\r\n            />\r\n            <div className=\"main-panel\" ref={mainPanelRef} data={color}>\r\n            <AdminNavbar\r\n                brandText={getBrandText(location.pathname)}\r\n                toggleSidebar={toggleSidebar}\r\n                sidebarOpened={sidebarOpened}\r\n              />\r\n              <Switch>\r\n                {getRoutes(routes)}\r\n                <Redirect from=\"*\" to=\"/LI/LIDashboard\" />\r\n              </Switch>\r\n              <Footer fluid />\r\n\r\n            </div>\r\n          </div>\r\n          <FixedPlugin bgColor={color} handleBgClick={changeColor} />\r\n        </React.Fragment>\r\n      )}\r\n    </BackgroundColorContext.Consumer>\r\n  );\r\n}\r\n\r\nexport default LI;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\components\\BackgroundColorWrapper\\BackgroundColorWrapper.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\components\\ThemeWrapper\\ThemeWrapper.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\ipfs.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\getWeb3.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\routeseller.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\routes.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\routesLI.js",["198"],"import LIDashboard from \"./views/LIDashboard\";\r\nimport ApproveTransaction from \"./views/ApproveTransaction\";\r\nimport BuyerInfo from \"./views/BuyerInfo\";\r\nimport SellerInfo from \"./views/SellerInfo\";\r\nimport TransactionInfo from \"./views/TransactionInfo\";\r\n\r\nvar routes = [\r\n  {\r\n    path: \"/LIDashboard\",\r\n    name: \"Dashboard\",\r\n    rtlName: \"لوحة القيادة\",\r\n    icon: \"tim-icons icon-chart-pie-36\",\r\n    component: LIDashboard,\r\n    layout: \"/LI\",\r\n  },\r\n  {\r\n    path: \"/BuyerInfo\",\r\n    name: \"BuyerInfo\",\r\n    rtlName: \"لوحة القيادة\",\r\n    icon: \"tim-icons icon-single-02\",\r\n    component: BuyerInfo,\r\n    layout: \"/LI\",\r\n  },\r\n  {\r\n    path: \"/SellerInfo\",\r\n    name: \"SellerInfo\",\r\n    rtlName: \"لوحة القيادة\",\r\n    icon: \"tim-icons icon-single-02\",\r\n    component: SellerInfo,\r\n    layout: \"/LI\",\r\n  },\r\n  {\r\n    path: \"/TransactionInfo\",\r\n    name: \"TransactionInfo\",\r\n    rtlName: \"لوحة القيادة\",\r\n    icon: \"tim-icons icon-send\",\r\n    component: TransactionInfo,\r\n    layout: \"/LI\",\r\n  },\r\n];\r\nexport default routes;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\components\\Navbars\\AdminNavbar.js",["199","200","201","202","203","204","205"],"\r\nimport React from \"react\";\r\n// nodejs library that concatenates classes\r\nimport classNames from \"classnames\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Collapse,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  Input,\r\n  InputGroup,\r\n  NavbarBrand,\r\n  Navbar,\r\n  NavLink,\r\n  Nav,\r\n  Container,\r\n  Modal,\r\n  NavbarToggler,\r\n  ModalHeader,\r\n} from \"reactstrap\";\r\n\r\nfunction AdminNavbar(props) {\r\n  const [collapseOpen, setcollapseOpen] = React.useState(false);\r\n  const [modalSearch, setmodalSearch] = React.useState(false);\r\n  const [color, setcolor] = React.useState(\"navbar-transparent\");\r\n  React.useEffect(() => {\r\n    window.addEventListener(\"resize\", updateColor);\r\n    // Specify how to clean up after this effect:\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", updateColor);\r\n    };\r\n  });\r\n  // function that adds color white/transparent to the navbar on resize (this is for the collapse)\r\n  const updateColor = () => {\r\n    if (window.innerWidth < 993 && collapseOpen) {\r\n      setcolor(\"bg-white\");\r\n    } else {\r\n      setcolor(\"navbar-transparent\");\r\n    }\r\n  };\r\n  // this function opens and closes the collapse on small devices\r\n  const toggleCollapse = () => {\r\n    if (collapseOpen) {\r\n      setcolor(\"navbar-transparent\");\r\n    } else {\r\n      setcolor(\"bg-white\");\r\n    }\r\n    setcollapseOpen(!collapseOpen);\r\n  };\r\n  // this function is to open the Search modal\r\n  const toggleModalSearch = () => {\r\n    setmodalSearch(!modalSearch);\r\n  };\r\n  return (\r\n    <>\r\n      <Navbar className={classNames(\"navbar-absolute\", color)} expand=\"lg\">\r\n        <Container fluid>\r\n          <div className=\"navbar-wrapper\">\r\n            <div\r\n              className={classNames(\"navbar-toggle d-inline\", {\r\n                toggled: props.sidebarOpened,\r\n              })}\r\n            >\r\n              <NavbarToggler onClick={props.toggleSidebar}>\r\n                <span className=\"navbar-toggler-bar bar1\" />\r\n                <span className=\"navbar-toggler-bar bar2\" />\r\n                <span className=\"navbar-toggler-bar bar3\" />\r\n              </NavbarToggler>\r\n            </div>\r\n            <NavbarBrand href=\"#pablo\" onClick={(e) => e.preventDefault()}>\r\n              {props.brandText}\r\n            </NavbarBrand>\r\n          </div>\r\n          <NavbarToggler onClick={toggleCollapse}>\r\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\r\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\r\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\r\n          </NavbarToggler>\r\n          <Collapse navbar isOpen={collapseOpen}>\r\n            <Nav className=\"ml-auto\" navbar>\r\n            <a href =\"/Help\" className=\"faq\" style={{borderRadius: \"10%\", textDecoration: \"none\", fontWeight: \"bolder\"}} >\r\n                 <h3 style={{color: \"black\"}}>Help?</h3>\r\n              </a>\r\n              \r\n              \r\n              <li className=\"separator d-lg-none\" />\r\n            </Nav>\r\n          </Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      <Modal\r\n        modalClassName=\"modal-search\"\r\n        isOpen={modalSearch}\r\n        toggle={toggleModalSearch}\r\n      >\r\n        <ModalHeader>\r\n          <Input placeholder=\"SEARCH\" type=\"text\" />\r\n          <button\r\n            aria-label=\"Close\"\r\n            className=\"close\"\r\n            onClick={toggleModalSearch}\r\n          >\r\n            <i className=\"tim-icons icon-simple-remove\" />\r\n          </button>\r\n        </ModalHeader>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AdminNavbar;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\components\\FixedPlugin\\FixedPlugin.js",["206"],"/*!\r\n\r\n=========================================================\r\n* Black Dashboard React v1.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/black-dashboard-react\r\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/black-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React from \"react\";\r\n\r\n// reactstrap components\r\nimport { Button, Dropdown, DropdownToggle, Badge } from \"reactstrap\";\r\nimport { ThemeContext, themes } from \"../../contexts/ThemeContext\";\r\nimport { backgroundColors } from \"../../contexts/BackgroundColorContext\";\r\n\r\nfunction FixedPlugin(props) {\r\n  const [dropDownIsOpen, setdropDownIsOpen] = React.useState(false);\r\n  const handleClick = () => {\r\n    setdropDownIsOpen(!dropDownIsOpen);\r\n  };\r\n  return (\r\n    <div className=\"fixed-plugin\">\r\n      <Dropdown isOpen={dropDownIsOpen} toggle={handleClick}>\r\n        <DropdownToggle tag=\"div\">\r\n          <i className=\"fa fa-cog fa-2x\" />\r\n        </DropdownToggle>\r\n        <ul className=\"dropdown-menu show\">\r\n          <li className=\"header-title\">SIDEBAR BACKGROUND</li>\r\n          <li className=\"adjustments-line\">\r\n            <div className=\"badge-colors text-center\">\r\n              <Badge\r\n                color=\"primary\"\r\n                className={\r\n                  props.bgColor === backgroundColors.primary ? \"active\" : \"\"\r\n                }\r\n                onClick={() => {\r\n                  props.handleBgClick(backgroundColors.primary);\r\n                }}\r\n              />{\" \"}\r\n              <Badge\r\n                color=\"info\"\r\n                className={\r\n                  props.bgColor === backgroundColors.blue ? \"active\" : \"\"\r\n                }\r\n                onClick={() => {\r\n                  props.handleBgClick(backgroundColors.blue);\r\n                }}\r\n              />{\" \"}\r\n              <Badge\r\n                color=\"success\"\r\n                className={\r\n                  props.bgColor === backgroundColors.green ? \"active\" : \"\"\r\n                }\r\n                onClick={() => {\r\n                  props.handleBgClick(backgroundColors.green);\r\n                }}\r\n              />{\" \"}\r\n            </div>\r\n          </li>\r\n          <li className=\"adjustments-line text-center color-change\">\r\n            <ThemeContext.Consumer>\r\n              {({ changeTheme }) => (\r\n                <>\r\n                  <span className=\"color-label\">LIGHT MODE</span>{\" \"}\r\n                  <Badge\r\n                    className=\"light-badge mr-2\"\r\n                    onClick={() => changeTheme(themes.light)}\r\n                  />{\" \"}\r\n                  <Badge\r\n                    className=\"dark-badge ml-2\"\r\n                    onClick={() => changeTheme(themes.dark)}\r\n                  />{\" \"}\r\n                  <span className=\"color-label\">DARK MODE</span>{\" \"}\r\n                </>\r\n              )}\r\n            </ThemeContext.Consumer>\r\n          </li>\r\n          <li className=\"button-container\">\r\n            {/* <Button\r\n              color=\"default\"\r\n              block\r\n              className=\"btn-round\"\r\n              outline\r\n              href=\"https://demos.creative-tim.com/black-dashboard-react/#/documentation/tutorial\"\r\n            >\r\n              Documentation\r\n            </Button> */}\r\n          </li>\r\n        </ul>\r\n      </Dropdown>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FixedPlugin;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\components\\Sidebar\\Sidebar.js",["207","208","209","210","211"],"import React from \"react\";\r\nimport { NavLink, Link, useLocation } from \"react-router-dom\";\r\n// nodejs library to set properties for components\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n// javascript plugin used to create scrollbars on windows\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\n\r\n// reactstrap components\r\nimport { Nav, NavLink as ReactstrapNavLink } from \"reactstrap\";\r\nimport {\r\n  BackgroundColorContext,\r\n  backgroundColors,\r\n} from \"../../contexts/BackgroundColorContext\";\r\n\r\nvar ps;\r\n\r\nfunction Sidebar(props) {\r\n  const location = useLocation();\r\n  const sidebarRef = React.useRef(null);\r\n  // verifies if routeName is the one active (in browser input)\r\n  const activeRoute = (routeName) => {\r\n    return location.pathname === routeName ? \"active\" : \"\";\r\n  };\r\n  React.useEffect(() => {\r\n    if (navigator.platform.indexOf(\"Win\") > -1) {\r\n      ps = new PerfectScrollbar(sidebarRef.current, {\r\n        suppressScrollX: true,\r\n        suppressScrollY: false,\r\n      });\r\n    }\r\n    // Specify how to clean up after this effect:\r\n    return function cleanup() {\r\n      if (navigator.platform.indexOf(\"Win\") > -1) {\r\n        ps.destroy();\r\n      }\r\n    };\r\n  });\r\n  const linkOnClick = () => {\r\n    document.documentElement.classList.remove(\"nav-open\");\r\n  };\r\n  const { routes, rtlActive, logo } = props;\r\n  let logoImg = null;\r\n  let logoText = null;\r\n  if (logo !== undefined) {\r\n    if (logo.outterLink !== undefined) {\r\n      logoImg = (\r\n        <a\r\n          href={logo.outterLink}\r\n          className=\"simple-text logo-mini\"\r\n          target=\"_blank\"\r\n          onClick={props.toggleSidebar}\r\n        >\r\n          <div className=\"logo-img\">\r\n            <img src={logo.imgSrc} alt=\"react-logo\" />\r\n          </div>\r\n        </a>\r\n      );\r\n      logoText = (\r\n        <a\r\n          href={logo.outterLink}\r\n          className=\"simple-text logo-normal\"\r\n          target=\"_blank\"\r\n          onClick={props.toggleSidebar}\r\n        >\r\n          {logo.text}\r\n        </a>\r\n      );\r\n    } else {\r\n      logoImg = (\r\n        <Link\r\n          to={logo.innerLink}\r\n          className=\"simple-text logo-mini\"\r\n          onClick={props.toggleSidebar}\r\n        >\r\n          <div className=\"logo-img\">\r\n            <img src={logo.imgSrc} alt=\"react-logo\" />\r\n          </div>\r\n        </Link>\r\n      );\r\n      logoText = (\r\n        <Link\r\n          to={logo.innerLink}\r\n          className=\"simple-text logo-normal\"\r\n          onClick={props.toggleSidebar}\r\n        >\r\n          {logo.text}\r\n        </Link>\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <BackgroundColorContext.Consumer>\r\n      {({ color }) => (\r\n        <div className=\"sidebar\" data={color}>\r\n          <div className=\"sidebar-wrapper\" ref={sidebarRef}>\r\n            {logoImg !== null || logoText !== null ? (\r\n              <div className=\"logo\">\r\n                \r\n              </div>\r\n            ) : null}\r\n            <Nav>\r\n              {routes.map((prop, key) => {\r\n                if (prop.redirect) return null;\r\n                return (\r\n                  <li\r\n                    className={\r\n                      activeRoute(prop.path) + (prop.pro ? \" active-pro\" : \"\")\r\n                    }\r\n                    key={key}\r\n                  >\r\n                    <NavLink\r\n                      to={prop.layout + prop.path}\r\n                      className=\"nav-link\"\r\n                      activeClassName=\"active\"\r\n                      onClick={props.toggleSidebar}\r\n                    >\r\n                      <i className={prop.icon} />\r\n                      <p>{rtlActive ? prop.rtlName : prop.name}</p>\r\n                    </NavLink>\r\n                  </li>\r\n                );\r\n              })}\r\n            \r\n            </Nav>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </BackgroundColorContext.Consumer>\r\n  );\r\n}\r\n\r\nSidebar.defaultProps = {\r\n  rtlActive: false,\r\n  routes: [{}],\r\n};\r\n\r\nSidebar.propTypes = {\r\n  // if true, then instead of the routes[i].name, routes[i].rtlName will be rendered\r\n  // insde the links of this component\r\n  rtlActive: PropTypes.bool,\r\n  routes: PropTypes.arrayOf(PropTypes.object),\r\n  logo: PropTypes.shape({\r\n    // innerLink is for links that will direct the user within the app\r\n    // it will be rendered as <Link to=\"...\">...</Link> tag\r\n    innerLink: PropTypes.string,\r\n    // outterLink is for links that will direct the user outside the app\r\n    // it will be rendered as simple <a href=\"...\">...</a> tag\r\n    outterLink: PropTypes.string,\r\n    // the text of the logo\r\n    text: PropTypes.node,\r\n    // the image src of the logo\r\n    imgSrc: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default Sidebar;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\LIDashboard.js",["212","213"],"import {\r\n    ContractData, LoadingContainer\r\n} from '@drizzle/react-components';\r\nimport { DrizzleProvider } from '@drizzle/react-plugin';\r\nimport React, { Component } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n// reactstrap components\r\nimport {\r\n    Button, Card, CardBody, CardHeader, Col, Row\r\n} from \"reactstrap\";\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport Land from \"../artifacts/Land.json\";\r\nimport \"../card.css\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport '../index.css';\r\n\r\n\r\n\r\n\r\nconst drizzleOptions = {\r\n    contracts: [Land]\r\n}\r\n\r\n\r\nvar verified;\r\nvar row = [];\r\nvar buyerarr = [];\r\nvar sellerarr = [];\r\nvar reqsarr = [];\r\n\r\nclass LIDashboard extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            LandInstance: undefined,\r\n            account: null,\r\n            web3: null,\r\n            verified: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        //For refreshing page only once\r\n        if (!window.location.hash) {\r\n            window.location = window.location + '#loaded';\r\n            window.location.reload();\r\n        }\r\n\r\n        try {\r\n            //Get network provider and web3 instance\r\n            const web3 = await getWeb3();\r\n\r\n            const accounts = await web3.eth.getAccounts();\r\n\r\n            const currentAddress = await web3.currentProvider.selectedAddress;\r\n            const networkId = await web3.eth.net.getId();\r\n            const deployedNetwork = Land.networks[networkId];\r\n            const instance = new web3.eth.Contract(\r\n                Land.abi,\r\n                deployedNetwork && deployedNetwork.address,\r\n            );\r\n\r\n            this.setState({ LandInstance: instance, web3: web3, account: accounts[0] });\r\n\r\n            var verified = await this.state.LandInstance.methods.isLandInspector(currentAddress).call();\r\n            this.setState({ verified: verified });\r\n\r\n            sellerarr.push(<ContractData contract=\"Land\" method=\"getSellersCount\" />);\r\n            buyerarr.push(<ContractData contract=\"Land\" method=\"getBuyersCount\" />);\r\n            reqsarr.push(<ContractData contract=\"Land\" method=\"getRequestsCount\" />);\r\n\r\n\r\n        } catch (error) {\r\n            // Catch any errors for any of the above operations.\r\n            alert(\r\n                `Failed to load web3, accounts, or contract. Check console for details.`,\r\n            );\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        if (!this.state.web3) {\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        <h1>\r\n                            <Spinner animation=\"border\" variant=\"primary\" />\r\n                        </h1>\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.state.verified) {\r\n            return (\r\n                <div className=\"content\">\r\n                    <div>\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                <Card className=\"card-chart\">\r\n                                    <CardBody>\r\n                                        <h1>\r\n                                            You are not verified to view this page\r\n                                        </h1>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <DrizzleProvider options={drizzleOptions}>\r\n                <LoadingContainer>\r\n                    <div className=\"content\">\r\n                        <div className=\"main-section\">\r\n                            <Row>\r\n                                <Col lg=\"4\">\r\n                                    <div class=\"dashbord dashbord-skyblue\">\r\n                                        <div class=\"icon-section\">\r\n                                            <i class=\"fa fa-users\" aria-hidden=\"true\"></i><br />\r\n                                            <medium>Total Buyers</medium><br />\r\n                                            <p> {buyerarr} </p>\r\n                                        </div>\r\n                                        <div class=\"detail-section\"><br />\r\n                                        </div>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col lg=\"4\">\r\n                                    <div class=\"dashbord dashbord-blue\">\r\n                                        <div class=\"icon-section\">\r\n                                            <i class=\"fa fa-bell\" aria-hidden=\"true\"></i><br />\r\n                                            <medium>Total Requests</medium><br />\r\n                                            <p>{reqsarr}</p>\r\n                                        </div>\r\n                                        <div class=\"detail-section\">\r\n                                            <br />\r\n                                        </div>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col lg=\"4\">\r\n                                    <div class=\"dashbord dashbord-orange\">\r\n                                        <div class=\"icon-section\">\r\n                                            <i class=\"fa fa-users\" aria-hidden=\"true\"></i><br />\r\n                                            <medium>Total Sellers</medium><br />\r\n                                            <p>{sellerarr}</p>\r\n                                        </div>\r\n                                        <div class=\"detail-section\"><br />\r\n                                        </div>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                        <Row>\r\n                            <Col lg=\"4\">\r\n                                <Card>\r\n                                    <CardHeader>\r\n                                        <h5 className=\"title\">Buyers Information</h5>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <div className=\"chart-area\">\r\n\r\n                                            <Button href=\"/LI/BuyerInfo\" className=\"btn-fill\" color=\"primary\">\r\n                                                Verify Buyers\r\n                                            </Button>\r\n                                        </div>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                            <Col lg=\"4\">\r\n                                <Card>\r\n                                    <CardHeader>\r\n                                        <h5 className=\"title\">Land Transfer Requests</h5>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <div className=\"chart-area\">\r\n\r\n                                            <Button href=\"/LI/TransactionInfo\" className=\"btn-fill\" color=\"primary\">\r\n                                                Approve Land Transactions\r\n                                            </Button>\r\n                                        </div>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                            <Col lg=\"4\">\r\n                                <Card>\r\n                                    <CardHeader>\r\n                                        <h5 className=\"title\">Sellers Information</h5>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <div className=\"chart-area\">\r\n\r\n                                            <Button href=\"/LI/SellerInfo\" className=\"btn-fill\" color=\"primary\">\r\n                                                Verify Sellers\r\n                                            </Button>\r\n                                        </div>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n\r\n\r\n                        </Row>\r\n                    </div>\r\n                </LoadingContainer>\r\n            </DrizzleProvider>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default LIDashboard;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\SellerDashboard.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\Dashboard.js",["214","215"],"import {\r\n  ContractData, LoadingContainer\r\n} from '@drizzle/react-components';\r\nimport { DrizzleProvider } from '@drizzle/react-plugin';\r\nimport React, { Component } from \"react\";\r\nimport { Spinner } from 'react-bootstrap';\r\n// reactstrap components\r\nimport {\r\n  Button, Card, CardBody, CardHeader, CardTitle, Col, Row, Table\r\n} from \"reactstrap\";\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport Land from \"../artifacts/Land.json\";\r\nimport \"../card.css\";\r\nimport getWeb3 from \"../getWeb3\";\r\n\r\n\r\nconst drizzleOptions = {\r\n  contracts: [Land]\r\n}\r\n\r\n\r\nvar row = [];\r\nvar countarr = [];\r\nvar userarr = [];\r\nvar reqsarr = [];\r\nvar landOwner = [];\r\n// var requested = false;\r\n\r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      LandInstance: undefined,\r\n      account: null,\r\n      web3: null,\r\n      count: 0,\r\n      requested: false,\r\n    }\r\n  }\r\n\r\n  requestLand = (seller_address, land_id) => async () => {\r\n\r\n    console.log(seller_address);\r\n    console.log(land_id);\r\n    // this.setState({requested: true});\r\n    // requested = true;\r\n    await this.state.LandInstance.methods.requestLand(\r\n      seller_address,\r\n      land_id\r\n    ).send({\r\n      from: this.state.account,\r\n      gas: 2100000\r\n    }).then(response => {\r\n      this.props.history.push(\"#\");\r\n    });\r\n\r\n    //Reload\r\n    window.location.reload(false);\r\n\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    //For refreshing page only once\r\n    if (!window.location.hash) {\r\n      console.log(window.location.hash);\r\n      window.location = window.location + '#loaded';\r\n      window.location.reload();\r\n    }\r\n\r\n    try {\r\n      //Get network provider and web3 instance\r\n      const web3 = await getWeb3();\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = Land.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        Land.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      this.setState({ LandInstance: instance, web3: web3, account: accounts[0] });\r\n\r\n      const currentAddress = await web3.currentProvider.selectedAddress;\r\n      console.log(currentAddress);\r\n      var registered = await this.state.LandInstance.methods.isBuyer(currentAddress).call();\r\n      console.log(registered);\r\n      this.setState({ registered: registered });\r\n      var count = await this.state.LandInstance.methods.getLandsCount().call();\r\n      count = parseInt(count);\r\n      console.log(typeof (count));\r\n      console.log(count);\r\n      var verified = await this.state.LandInstance.methods.isVerified(currentAddress).call();\r\n      console.log(verified);\r\n\r\n      // var countbuyer = await this.state.LandInstance.methods.getBuyersCount().call();\r\n      // var countseller = await this.state.LandInstance.methods.getSellersCount().call();\r\n      // userarr.push(<p>{countseller.toString()}</p>);\r\n\r\n      // countarr.push(<p>{count.toString()}</p>);\r\n      countarr.push(<ContractData contract=\"Land\" method=\"getLandsCount\" />);\r\n      userarr.push(<ContractData contract=\"Land\" method=\"getSellersCount\" />);\r\n      reqsarr.push(<ContractData contract=\"Land\" method=\"getRequestsCount\" />);\r\n\r\n      var rowsArea = [];\r\n      var rowsCity = [];\r\n      var rowsState = [];\r\n      var rowsPrice = [];\r\n      var rowsPID = [];\r\n      var rowsSurvey = [];\r\n\r\n\r\n      var dict = {}\r\n      for (var i = 1; i < count + 1; i++) {\r\n        var address = await this.state.LandInstance.methods.getLandOwner(i).call();\r\n        dict[i] = address;\r\n      }\r\n\r\n      console.log(dict[1]);\r\n\r\n      for ( i = 1; i < count + 1; i++) {\r\n        rowsArea.push(<ContractData contract=\"Land\" method=\"getArea\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsCity.push(<ContractData contract=\"Land\" method=\"getCity\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsState.push(<ContractData contract=\"Land\" method=\"getState\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsPrice.push(<ContractData contract=\"Land\" method=\"getPrice\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsPID.push(<ContractData contract=\"Land\" method=\"getPID\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsSurvey.push(<ContractData contract=\"Land\" method=\"getSurveyNumber\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n      }\r\n\r\n      for (var i = 0; i < count; i++) {\r\n        var requested = await this.state.LandInstance.methods.isRequested(i + 1).call();\r\n        // console.log(requested);\r\n\r\n        row.push(<tr><td>{i + 1}</td><td>{rowsArea[i]}</td><td>{rowsCity[i]}</td><td>{rowsState[i]}</td><td>{rowsPrice[i]}</td><td>{rowsPID[i]}</td><td>{rowsSurvey[i]}</td>\r\n          <td>\r\n            <Button onClick={this.requestLand(dict[i + 1], i + 1)} disabled={!verified || requested} className=\"button-vote\">\r\n              Request Land\r\n            </Button>\r\n          </td>\r\n        </tr>)\r\n      }\r\n      console.log(row);\r\n\r\n\r\n\r\n\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return (\r\n        <div>\r\n          <div>\r\n            <h1>\r\n              <Spinner animation=\"border\" variant=\"primary\" />\r\n            </h1>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!this.state.registered) {\r\n      return (\r\n        <div className=\"content\">\r\n          <div>\r\n            <Row>\r\n              <Col xs=\"6\">\r\n                <Card className=\"card-chart\">\r\n                  <CardBody>\r\n                    <h1>\r\n                      You are not verified to view this page\r\n                    </h1>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className=\"content\">\r\n          <DrizzleProvider options={drizzleOptions}>\r\n            <LoadingContainer>\r\n              <div className=\"main-section\">\r\n                <Row>\r\n                  <Col lg=\"4\">\r\n                    <div class=\"dashbord dashbord-skyblue\">\r\n                      <div class=\"icon-section\">\r\n                        <i class=\"fa fa-users\" aria-hidden=\"true\"></i><br />\r\n                        <medium>Total Sellers</medium><br />\r\n                        <p> {userarr} </p>\r\n                      </div>\r\n                      <div class=\"detail-section\"><br />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                  <Col lg=\"4\">\r\n                    <div class=\"dashbord dashbord-orange\">\r\n                      <div class=\"icon-section\">\r\n                        <i class=\"fa fa-landmark\" aria-hidden=\"true\"></i><br />\r\n                        <medium>Registered Lands Count</medium><br />\r\n                        <p>{countarr}</p>\r\n                      </div>\r\n                      <div class=\"detail-section\"><br />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                  <Col lg=\"4\">\r\n                    <div class=\"dashbord dashbord-blue\">\r\n                      <div class=\"icon-section\">\r\n                        <i class=\"fa fa-bell\" aria-hidden=\"true\"></i><br />\r\n                        <medium>Total Requests</medium><br />\r\n                        <p>{reqsarr}</p>\r\n                      </div>\r\n                      <div class=\"detail-section\">\r\n                        <br />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n            </LoadingContainer>\r\n          </DrizzleProvider>\r\n          <Row>\r\n            <Col lg=\"4\">\r\n              <Card>\r\n                <CardHeader>\r\n                  <h5 className=\"title\">Profile</h5>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <div className=\"chart-area\">\r\n\r\n                    <Button href=\"/admin/buyerProfile\" className=\"btn-fill\" color=\"primary\">\r\n                      View Profile\r\n                    </Button>\r\n                  </div>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Col lg=\"4\">\r\n              <Card>\r\n                <CardHeader>\r\n                  <h5 className=\"title\">Owned Lands</h5>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <div className=\"chart-area\">\r\n\r\n                    <Button href=\"/admin/OwnedLands\" className=\"btn-fill\" color=\"primary\">\r\n                      View Your Lands\r\n                    </Button>\r\n                  </div>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Col lg=\"4\">\r\n              <Card>\r\n                <CardHeader>\r\n                  <h5 className=\"title\">Make Payments for Approved Land Requests</h5>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <div className=\"chart-area\">\r\n\r\n                    <Button href=\"/admin/MakePayment\" className=\"btn-fill\" color=\"primary\">\r\n                      Make Payment\r\n                    </Button>\r\n                  </div>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <DrizzleProvider options={drizzleOptions}>\r\n            <LoadingContainer>\r\n              <Row>\r\n                <Col lg=\"12\" md=\"12\">\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle tag=\"h4\">Lands Info</CardTitle>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                      <Table className=\"tablesorter\" responsive color=\"black\">\r\n                        <thead className=\"text-primary\">\r\n                          <tr>\r\n                            <th>#</th>\r\n                            <th>Area</th>\r\n                            <th>City</th>\r\n                            <th>State</th>\r\n                            <th>Price</th>\r\n                            <th>Property PID</th>\r\n                            <th>Survey Number</th>\r\n                            <th>Request Land</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {row}\r\n                        </tbody>\r\n                      </Table>\r\n                    </CardBody>\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </LoadingContainer>\r\n          </DrizzleProvider>\r\n        </div>\r\n      </>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Dashboard;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\components\\Footer\\Footer.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\contexts\\BackgroundColorContext.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\contexts\\ThemeContext.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\viewImage.js",["216","217"],"import {\r\n  ContractData, LoadingContainer\r\n} from '@drizzle/react-components';\r\nimport { DrizzleProvider } from '@drizzle/react-plugin';\r\nimport React, { Component } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n// reactstrap components\r\nimport {\r\n  Card, CardBody, Col, Row\r\n} from \"reactstrap\";\r\nimport Land from \"../artifacts/Land.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport imagedisplay from './3Dmodelling';\r\nimport \"../index.css\";\r\n\r\n\r\n\r\nconst drizzleOptions = {\r\n  contracts: [Land]\r\n}\r\n\r\nvar verified;\r\nvar row = [];\r\nvar rowsIpfs = [];\r\n\r\nclass viewImage extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      LandInstance: undefined,\r\n      account: null,\r\n      web3: null,\r\n      flag: null,\r\n      verified: '',\r\n      registered: '',\r\n      count: 0,\r\n      id: '',\r\n    }\r\n  }\r\n\r\n  viewImage = (landId) => {\r\n    alert(landId);\r\n    this.props.history.push({\r\n      pathname: '/viewImage',\r\n    })\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    //For refreshing page only once\r\n    if (!window.location.hash) {\r\n      window.location = window.location + '#loaded';\r\n      window.location.reload();\r\n    }\r\n\r\n    try {\r\n      //Get network provider and web3 instance\r\n      const web3 = await getWeb3();\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = Land.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        Land.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      const currentAddress = await web3.currentProvider.selectedAddress;\r\n      console.log(currentAddress);\r\n      this.setState({ LandInstance: instance, web3: web3, account: accounts[0] });\r\n      verified = await this.state.LandInstance.methods.isVerified(currentAddress).call();\r\n      console.log(verified);\r\n      this.setState({ verified: verified });\r\n      var registered = true;\r\n      this.setState({ registered: registered });\r\n\r\n      var count = await this.state.LandInstance.methods.getLandsCount().call();\r\n      count = parseInt(count);\r\n      console.log(typeof (count));\r\n      console.log(count);\r\n      //this.setState({count:count});\r\n\r\n      var rowsArea = [];\r\n      var rowsCity = [];\r\n      var rowsState = [];\r\n      var rowsSt = [];\r\n      var rowsPrice = [];\r\n      var rowsPID = [];\r\n      var rowsSurvey = [];\r\n      var rowsIpfs = [];\r\n      var rowsDocs = [];\r\n\r\n      for (var i = 1; i < count + 1; i++) {\r\n        rowsArea.push(<ContractData contract=\"Land\" method=\"getArea\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsCity.push(<ContractData contract=\"Land\" method=\"getCity\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsState.push(<ContractData contract=\"Land\" method=\"getState\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsSt.push(<ContractData contract=\"Land\" method=\"getStatus\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsPrice.push(<ContractData contract=\"Land\" method=\"getPrice\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsPID.push(<ContractData contract=\"Land\" method=\"getPID\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsSurvey.push(<ContractData contract=\"Land\" method=\"getSurveyNumber\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsIpfs.push((<ContractData contract=\"Land\" method=\"getImage\"  methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />));\r\n      }\r\n\r\n\r\n      for ( i = 1; i < count + 1; i++) {\r\n        var landImg = await this.state.LandInstance.methods.getImage(i).call();\r\n        rowsIpfs.push(landImg)\r\n        var document = await this.state.LandInstance.methods.getDocument(i).call();\r\n        rowsDocs.push(document);\r\n        // row.push(<> <Col xs=\"6\"><Card style={{textAlign: \"center\"}}>\r\n        //   <CardHeader><CardTitle><h2>Land {i}</h2></CardTitle></CardHeader>\r\n        // <CardBody><div><img src={`https://ipfs.io/ipfs/${landImg}`} alt=\"\" width=\"90%\" height=\"90%\" style={{marginBottom:\"10px\"}}/><p>Area: {rowsArea[i-1]}</p><p>City: {rowsCity[i-1]}</p><p>State: {rowsState[i-1]}</p><p>PID: {rowsPID[i-1]}</p><p>Price: {rowsPrice[i-1]}</p> \r\n        // </div></CardBody></Card></Col></>)\r\n        row.push(<Col xs=\"6\">\r\n\r\n          <div class=\"post-module\">\r\n\r\n          \r\n            <div className=\"thumbnail\">\r\n              <div className=\"date\">\r\n                <div className=\"day\">{i}</div>\r\n              </div>\r\n              <img src=\"./Land_image.jpg\" alt=\"nice\" />\r\n            </div>\r\n\r\n\r\n\r\n            <div class=\"post-content\">\r\n              <div class=\"category\">Photos</div>\r\n              <h1 class=\"title\">{rowsArea[i - 1]} Sq. m.</h1>\r\n              <h2 class=\"sub_title\">{rowsCity[i - 1]}, {rowsState[i - 1]}</h2>\r\n              <p class=\"description\">PID: {rowsPID[i - 1]}<br /> Survey No.: {rowsSurvey[i - 1]}</p>\r\n              <div class=\"post-meta\"><span class=\"timestamp\">Price: ₹ {rowsPrice[i - 1]}</span></div>\r\n              <div class=\"post-meta\"><span class=\"timestamp\">View Verified Land  <a href={`https://landregistry.infura-ipfs.io/${document}`} target=\"_blank\" rel=\"noreferrer\">Document</a></span></div>\r\n              <div><a href='http://127.0.0.1:5501/index.html'>View in 360 degree</a></div>\r\n            </div>\r\n          </div>\r\n        </Col>)\r\n      }\r\n      console.log(row)\r\n\r\n\r\n\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return (\r\n        <div>\r\n          <div>\r\n            <h1>\r\n              <Spinner animation=\"border\" variant=\"primary\" />\r\n            </h1>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!this.state.registered || !this.state.verified) {\r\n      return (\r\n        <div className=\"content\">\r\n          <div>\r\n            <Row>\r\n              <Col xs=\"6\">\r\n                <Card>\r\n                  <CardBody>\r\n                    <h1>\r\n                      You are not verified to view this page\r\n                    </h1>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n    return (\r\n      <>\r\n        <div className=\"content\">\r\n          <DrizzleProvider options={drizzleOptions}>\r\n            <LoadingContainer>\r\n\r\n              <Row>\r\n\r\n                {row}\r\n\r\n              </Row>\r\n            </LoadingContainer>\r\n          </DrizzleProvider>\r\n\r\n        </div>\r\n      </>\r\n\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default viewImage;","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\sellerProfile.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\ApproveRequest.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\MakePayment.js",["218"],"import {\r\n  LoadingContainer\r\n} from '@drizzle/react-components';\r\nimport { DrizzleProvider } from '@drizzle/react-plugin';\r\nimport React, { Component } from \"react\";\r\nimport { Spinner } from 'react-bootstrap';\r\n// reactstrap components\r\nimport {\r\n  Button, Card, CardBody, CardHeader, CardTitle, Col, Row, Table\r\n} from \"reactstrap\";\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport Land from \"../artifacts/Land.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport \"../index.css\";\r\n\r\n\r\n\r\nconst drizzleOptions = {\r\n  contracts: [Land]\r\n}\r\n\r\n\r\nvar row = [];\r\nvar landOwner = [];\r\n\r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      LandInstance: undefined,\r\n      account: null,\r\n      web3: null,\r\n      count: 0,\r\n      requested: false,\r\n    }\r\n  }\r\n\r\n\r\n  makePayment = (seller_address, amount, land_id) => async () => {\r\n    // alert(amount);\r\n\r\n    amount = amount * 0.0000057;\r\n    alert(amount);\r\n    await this.state.LandInstance.methods.payment(\r\n      seller_address,\r\n      land_id\r\n    ).send({\r\n      from: this.state.account,\r\n      value: this.state.web3.utils.toWei(amount.toString(), \"ether\"),\r\n      gas: 2100000\r\n    }).then(response => {\r\n      this.props.history.push(\"#\");\r\n    });\r\n    //Reload\r\n    window.location.reload(false);\r\n\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    //For refreshing page only once\r\n    if (!window.location.hash) {\r\n      console.log(window.location.hash);\r\n      window.location = window.location + '#loaded';\r\n      window.location.reload();\r\n    }\r\n\r\n    try {\r\n      //Get network provider and web3 instance\r\n      const web3 = await getWeb3();\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = Land.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        Land.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      this.setState({ LandInstance: instance, web3: web3, account: accounts[0] });\r\n\r\n      const currentAddress = await web3.currentProvider.selectedAddress;\r\n      console.log(currentAddress);\r\n      var registered = await this.state.LandInstance.methods.isBuyer(currentAddress).call();\r\n      console.log(registered);\r\n      this.setState({ registered: registered });\r\n      var count = await this.state.LandInstance.methods.getLandsCount().call();\r\n      count = parseInt(count);\r\n      console.log(typeof (count));\r\n      console.log(count);\r\n\r\n\r\n\r\n      var dict = {}\r\n      for (var i = 1; i < count + 1; i++) {\r\n        var address = await this.state.LandInstance.methods.getLandOwner(i).call();\r\n        dict[i] = address;\r\n      }\r\n\r\n      for ( i = 0; i < count; i++) {\r\n        var paid = await this.state.LandInstance.methods.isPaid(i + 1).call();\r\n        var price = await this.state.LandInstance.methods.getPrice(i + 1).call();\r\n        row.push(<tr><td>{i + 1}</td><td>{dict[i + 1]}</td><td>{price}</td>\r\n          <td>\r\n            <Button onClick={this.makePayment(dict[i + 1], price, i + 1)}\r\n              disabled={paid} className=\"btn btn-success\">\r\n              Make Payment\r\n            </Button>\r\n          </td>\r\n        </tr>)\r\n\r\n      }\r\n      console.log(row);\r\n\r\n\r\n\r\n\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return (\r\n        <div>\r\n          <div>\r\n            <h1>\r\n              <Spinner animation=\"border\" variant=\"primary\" />\r\n            </h1>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!this.state.registered) {\r\n      return (\r\n        <div className=\"content\">\r\n          <div>\r\n            <Row>\r\n              <Col xs=\"6\">\r\n                <Card className=\"card-chart\">\r\n                  <CardBody>\r\n                    <h1>\r\n                      You are not verified to view this page\r\n                    </h1>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className=\"content\">\r\n          <DrizzleProvider options={drizzleOptions}>\r\n            <LoadingContainer>\r\n              <Row>\r\n                <Col lg=\"12\" md=\"12\">\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle tag=\"h4\">Payment for Lands<span className=\"duration\">₹ 1 = 0.0000067 Ether</span></CardTitle>\r\n\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                      <Table className=\"tablesorter\" responsive color=\"black\">\r\n                        <thead className=\"text-primary\">\r\n                          <tr>\r\n                            <th>#</th>\r\n                            <th>Land Owner</th>\r\n                            <th>Price ( in rupees )</th>\r\n                            <th>Make Payment</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {row}\r\n                        </tbody>\r\n                      </Table>\r\n                    </CardBody>\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </LoadingContainer>\r\n          </DrizzleProvider>\r\n        </div>\r\n      </>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Dashboard;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\AddLand.js",["219"],"import React, { Component } from 'react';\r\nimport LandContract from \"../artifacts/Land.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport ipfs from '../ipfs';\r\n\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardFooter,\r\n  CardText,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\nimport { Spinner,   FormFile} from 'react-bootstrap';\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nclass AddLand extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      LandInstance: undefined,\r\n      account: null,\r\n      web3: null,\r\n      area: '',\r\n      city: '',\r\n      stateLoc: '',\r\n      price: '',\r\n      lands: null,\r\n      verficationStatus: false,\r\n      verified: '',\r\n      registered: '',\r\n      buffer: null,\r\n      ipfsHash: '',\r\n      propertyPID: '',\r\n      surveyNum: '',\r\n      buffer2: null,\r\n      document: '',\r\n    }\r\n    this.captureFile = this.captureFile.bind(this);\r\n    this.addimage = this.addimage.bind(this);\r\n    this.captureDoc = this.captureDoc.bind(this);\r\n    this.addDoc = this.addDoc.bind(this);\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    //For refreshing page only once\r\n    if (!window.location.hash) {\r\n      window.location = window.location + '#loaded';\r\n      window.location.reload();\r\n    }\r\n\r\n    try {\r\n      //Get network provider and web3 instance\r\n      const web3 = await getWeb3();\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = LandContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        LandContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      this.setState({ LandInstance: instance, web3: web3, account: accounts[0] });\r\n      const currentAddress = await web3.currentProvider.selectedAddress;\r\n      console.log(currentAddress);\r\n      this.setState({ LandInstance: instance, web3: web3, account: accounts[0] });\r\n      var verified = await this.state.LandInstance.methods.isVerified(currentAddress).call();\r\n      console.log(verified);\r\n      this.setState({ verified: verified });\r\n      var registered = await this.state.LandInstance.methods.isSeller(currentAddress).call();\r\n      console.log(registered);\r\n      this.setState({ registered: registered });\r\n\r\n\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  addimage = async () => {\r\n    // alert('In add image')\r\n    await ipfs.files.add(this.state.buffer, (error, result) => {\r\n      if (error) {\r\n        alert(error)\r\n        return\r\n      }\r\n\r\n      alert(result[0].hash)\r\n      this.setState({ ipfsHash: result[0].hash });\r\n      console.log('ipfsHash:', this.state.ipfsHash);\r\n    })\r\n  }\r\n  addDoc = async () => {\r\n    // alert('In add image')\r\n    await ipfs.files.add(this.state.buffer2, (error, result) => {\r\n      if (error) {\r\n        alert(error)\r\n        return\r\n      }\r\n\r\n      alert(result[0].hash)\r\n      this.setState({ document: result[0].hash });\r\n      console.log('document:', this.state.document);\r\n    })\r\n  }\r\n\r\n  //QmYdztkcPJLmGmwLmM4nyBfVatoBMRDuUjmgBupjmTodAP\r\n  addLand = async () => {\r\n    this.addimage();\r\n    this.addDoc();\r\n    // alert('After add image')\r\n    await new Promise(resolve => setTimeout(resolve, 15000));\r\n    if (this.state.area === '' || this.state.city === '' || this.state.stateLoc === '' || this.state.price === '' || this.state.propertyPID === '' || this.state.surveyNum === '') {\r\n      alert(\"All the fields are compulsory!\");\r\n    } else if ((!Number(this.state.area)) || (!Number(this.state.price))) {\r\n      alert(\"Land area and Price of Land must be a number!\");\r\n    } else {\r\n      await this.state.LandInstance.methods.addLand(\r\n        this.state.area,\r\n        this.state.city,\r\n        this.state.stateLoc,\r\n        this.state.price, \r\n        this.state.propertyPID,\r\n        this.state.surveyNum,\r\n        this.state.ipfsHash, \r\n        this.state.document)\r\n        .send({\r\n          from: this.state.account,\r\n          gas: 2100000\r\n        }).then(response => {\r\n          this.props.history.push(\"/Seller/SellerDashboard\");\r\n        });\r\n\r\n      //Reload\r\n      window.location.reload(false);\r\n    }\r\n  }\r\n  // _city,string  _state, uint landPrice, uint _propertyPID,uint _surveyNum,string memory _ipfsHash\r\n\r\n  updateArea = event => (\r\n    this.setState({ area: event.target.value })\r\n  )\r\n  updateCity = event => (\r\n    this.setState({ city: event.target.value })\r\n  )\r\n  updateState = event => (\r\n    this.setState({ stateLoc: event.target.value })\r\n  )\r\n  updatePrice = event => (\r\n    this.setState({ price: event.target.value })\r\n  )\r\n  updatePID = event => (\r\n    this.setState({ propertyPID: event.target.value })\r\n  )\r\n  updateSurveyNum = event => (\r\n    this.setState({ surveyNum: event.target.value })\r\n  )\r\n  captureFile(event) {\r\n    event.preventDefault()\r\n    const file = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onloadend = () => {\r\n      this.setState({ buffer: Buffer(reader.result) })\r\n      console.log('buffer', this.state.buffer)\r\n    }\r\n    console.log('capture file...')\r\n  }\r\n  captureDoc(event) {\r\n    event.preventDefault()\r\n    const file2 = event.target.files[0]\r\n    const reader2 = new window.FileReader()\r\n    reader2.readAsArrayBuffer(file2)\r\n    reader2.onloadend = () => {\r\n      this.setState({ buffer2: Buffer(reader2.result) })\r\n      console.log('buffer2', this.state.buffer2)\r\n    }\r\n    console.log('capture doc...')\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return (\r\n        <div>\r\n          <div>\r\n            <h1>\r\n              <Spinner animation=\"border\" variant=\"primary\" />\r\n            </h1>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!this.state.registered || !this.state.verified) {\r\n      return (\r\n        <div className=\"content\">\r\n          <div>\r\n            <Row>\r\n              <Col xs=\"6\">\r\n                <Card className=\"card-chart\">\r\n                  <CardBody>\r\n                    <h1>\r\n                      You are not verified to view this page\r\n                                        </h1>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"content\">\r\n        <Row>\r\n          <Col md=\"8\">\r\n            <Card>\r\n              <CardHeader>\r\n                <h5 className=\"title\">Add Land</h5>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <Form>\r\n                  <Row>\r\n                    <Col md=\"12\">\r\n                      <FormGroup>\r\n                        <label>Area (in sqm.)</label>\r\n                        <Input\r\n                          placeholder=\"Area\"\r\n                          type=\"text\"\r\n                          value={this.state.area}\r\n                          onChange={this.updateArea}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md=\"12\">\r\n                      <FormGroup>\r\n                        <label>City</label>\r\n                        <Input\r\n                          placeholder=\"City\"\r\n                          type=\"text\"\r\n                          value={this.state.city}\r\n                          onChange={this.updateCity}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md=\"12\">\r\n                      <FormGroup>\r\n                        <label>Country</label>\r\n                        <Input\r\n                          placeholder=\"Country\"\r\n                          type=\"text\"\r\n                          value={this.state.stateLoc}\r\n                          onChange={this.updateState}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md=\"12\">\r\n                      <FormGroup>\r\n                        <label>Price</label>\r\n                        <Input\r\n                          placeholder=\"Price\"\r\n                          type=\"text\"\r\n                          value={this.state.price}\r\n                          onChange={this.updatePrice}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md=\"12\">\r\n                      <FormGroup>\r\n                        <label>Property PID Number</label>\r\n                        <Input\r\n                          placeholder=\"Property PID\"\r\n                          type=\"text\"\r\n                          value={this.state.propertyPID}\r\n                          onChange={this.updatePID}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md=\"12\">\r\n                      <FormGroup>\r\n                        <label>Physical Survey Number</label>\r\n                        <Input\r\n                          placeholder=\"Survey Num\"\r\n                          type=\"text\"\r\n                          value={this.state.surveyNum}\r\n                          onChange={this.updateSurveyNum}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md=\"12\">\r\n                      <FormGroup>\r\n                        <label>Insert Land Image</label>\r\n                        <FormFile\r\n                          id=\"File1\"\r\n                          onChange={this.captureFile}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md=\"12\">\r\n                      <FormGroup>\r\n                        <label>Insert ID card document</label>\r\n                        <FormFile\r\n                          id=\"File2\"\r\n                          onChange={this.captureDoc}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                </Form>\r\n              </CardBody>\r\n              <CardFooter>\r\n                <Button className=\"btn-fill\" color=\"primary\" onClick={this.addLand}>\r\n                  Add Land\r\n                </Button>\r\n              </CardFooter>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default AddLand;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\updateSeller.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\updateBuyer.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\buyerProfile.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\ApproveTransaction.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\OwnedLands.js",["220"],"import {\r\n  ContractData, LoadingContainer\r\n} from '@drizzle/react-components';\r\nimport { DrizzleProvider } from '@drizzle/react-plugin';\r\nimport React, { Component } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n// reactstrap components\r\nimport {\r\n  Card, CardBody, CardHeader, CardTitle, Col, Row, Table\r\n} from \"reactstrap\";\r\nimport Land from \"../artifacts/Land.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\n\r\n\r\n\r\n\r\nconst drizzleOptions = {\r\n  contracts: [Land]\r\n}\r\n\r\n\r\nvar verified;\r\nvar row = [];\r\n\r\n\r\nclass OwnedLands extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      LandInstance: undefined,\r\n      account: null,\r\n      web3: null,\r\n      flag: null,\r\n      verified: '',\r\n      registered: '',\r\n      count: 0,\r\n      id: '',\r\n    }\r\n  }\r\n\r\n  viewImage = (landId) => {\r\n    alert(landId);\r\n    this.props.history.push({\r\n      pathname: '/viewImage',\r\n    })\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    //For refreshing page only once\r\n    if (!window.location.hash) {\r\n      window.location = window.location + '#loaded';\r\n      window.location.reload();\r\n    }\r\n\r\n    try {\r\n      //Get network provider and web3 instance\r\n      const web3 = await getWeb3();\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = Land.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        Land.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      const currentAddress = await web3.currentProvider.selectedAddress;\r\n      console.log(currentAddress);\r\n      this.setState({ LandInstance: instance, web3: web3, account: accounts[0] });\r\n      verified = await this.state.LandInstance.methods.isVerified(currentAddress).call();\r\n      console.log(verified);\r\n      this.setState({ verified: verified });\r\n      var registered = await this.state.LandInstance.methods.isBuyer(currentAddress).call();\r\n      console.log(registered);\r\n      this.setState({ registered: registered });\r\n\r\n      var count = await this.state.LandInstance.methods.getLandsCount().call();\r\n      count = parseInt(count);\r\n      console.log(typeof (count));\r\n      console.log(count);\r\n      //this.setState({count:count});\r\n\r\n      var rowsArea = [];\r\n      var rowsCity = [];\r\n      var rowsState = [];\r\n      var rowsPrice = [];\r\n      var rowsPID = [];\r\n      var rowsSurvey = [];\r\n      var rowsIpfs = []\r\n\r\n\r\n      for (var i = 1; i < count + 1; i++) {\r\n        rowsArea.push(<ContractData contract=\"Land\" method=\"getArea\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsCity.push(<ContractData contract=\"Land\" method=\"getCity\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsState.push(<ContractData contract=\"Land\" method=\"getState\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsPrice.push(<ContractData contract=\"Land\" method=\"getPrice\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsPID.push(<ContractData contract=\"Land\" method=\"getPID\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n        rowsSurvey.push(<ContractData contract=\"Land\" method=\"getSurveyNumber\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n      }\r\n\r\n\r\n      for ( i = 0; i < count; i++) {\r\n        var owner = await this.state.LandInstance.methods.getLandOwner(i + 1).call();\r\n        console.log(owner.toLowerCase());\r\n        console.log(currentAddress);\r\n        if (owner.toLowerCase() === currentAddress) {\r\n          row.push(<tr><td>{i + 1}</td><td>{rowsArea[i]}</td><td>{rowsCity[i]}</td><td>{rowsState[i]}</td><td>{rowsPrice[i]}</td><td>{rowsPID[i]}</td><td>{rowsSurvey[i]}</td>\r\n          </tr>)\r\n        }\r\n      }\r\n      console.log(row);\r\n\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return (\r\n        <div>\r\n          <div>\r\n            <h1>\r\n              <Spinner animation=\"border\" variant=\"primary\" />\r\n            </h1>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!this.state.registered) {\r\n      return (\r\n        <div className=\"content\">\r\n          <div>\r\n            <Row>\r\n              <Col xs=\"6\">\r\n                <Card className=\"card-chart\">\r\n                  <CardBody>\r\n                    <h1>\r\n                      You are not verified to view this page\r\n                    </h1>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n    return (\r\n      <>\r\n        <div className=\"content\">\r\n          <DrizzleProvider options={drizzleOptions}>\r\n            <LoadingContainer>\r\n              <Row>\r\n                <Col lg=\"12\" md=\"12\">\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle tag=\"h4\">Owned Lands\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                      <Table className=\"tablesorter\" responsive color=\"black\">\r\n                        <thead className=\"text-primary\">\r\n                          <tr>\r\n                            <th>#</th>\r\n                            <th>Area</th>\r\n                            <th>City</th>\r\n                            <th>State</th>\r\n                            <th>Price</th>\r\n                            <th>Property PID</th>\r\n                            <th>Survey Number</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {row}\r\n                        </tbody>\r\n                      </Table>\r\n                    </CardBody>\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </LoadingContainer>\r\n          </DrizzleProvider>\r\n        </div>\r\n      </>\r\n\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default OwnedLands;","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\BuyerInfo.js",["221"],"import { LoadingContainer } from '@drizzle/react-components';\r\nimport { DrizzleProvider } from '@drizzle/react-plugin';\r\nimport React, { Component } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n// reactstrap components\r\nimport {\r\n    Button, Card, CardBody, CardHeader, CardTitle, Col, Row, Table\r\n} from \"reactstrap\";\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport Land from \"../artifacts/Land.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport '../index.css';\r\n\r\n\r\nconst drizzleOptions = {\r\n    contracts: [Land]\r\n}\r\n\r\n// var buyers = 0;\r\n// var sellers = 0;\r\nvar buyerTable = [];\r\nvar completed = true;\r\n\r\nfunction sendMail(email, name) {\r\n    // alert(typeof(name));\r\n\r\n    var tempParams = {\r\n        from_name: email,\r\n        to_name: name,\r\n        function: 'request and buy any land/property',\r\n    };\r\n\r\n    window.emailjs.send('service_vrxa1ak', 'template_zhc8m9h', tempParams)\r\n        .then(function (res) {\r\n            alert(\"Mail sent successfully\");\r\n        })\r\n}\r\n\r\nclass BuyerInfo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            LandInstance: undefined,\r\n            account: null,\r\n            web3: null,\r\n            buyers: 0,\r\n            verified: '',\r\n        }\r\n    }\r\n\r\n\r\n    verifyBuyer = (item) => async () => {\r\n        //console.log(\"Hello\");\r\n        //console.log(item);\r\n\r\n        await this.state.LandInstance.methods.verifyBuyer(\r\n            item\r\n        ).send({\r\n            from: this.state.account,\r\n            gas: 2100000\r\n        });\r\n\r\n        //Reload\r\n        window.location.reload(false);\r\n\r\n    }\r\n\r\n    NotverifyBuyer = (item, email, name) => async () => {\r\n        // alert('Before mail');\r\n        sendMail(email, name);\r\n        // alert('After mail');\r\n\r\n        await new Promise(resolve => setTimeout(resolve, 10000));\r\n\r\n        await this.state.LandInstance.methods.rejectBuyer(\r\n            item\r\n        ).send({\r\n            from: this.state.account,\r\n            gas: 2100000\r\n        });\r\n\r\n        window.location.reload(false);\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        //For refreshing page only once\r\n        if (!window.location.hash) {\r\n            window.location = window.location + '#loaded';\r\n            window.location.reload();\r\n        }\r\n\r\n        try {\r\n            //Get network provider and web3 instance\r\n            const web3 = await getWeb3();\r\n\r\n            const accounts = await web3.eth.getAccounts();\r\n\r\n            const currentAddress = await web3.currentProvider.selectedAddress;\r\n            //console.log(currentAddress);\r\n            const networkId = await web3.eth.net.getId();\r\n            const deployedNetwork = Land.networks[networkId];\r\n            const instance = new web3.eth.Contract(\r\n                Land.abi,\r\n                deployedNetwork && deployedNetwork.address,\r\n            );\r\n\r\n            this.setState({ LandInstance: instance, web3: web3, account: accounts[0] });\r\n\r\n\r\n            var buyersCount = await this.state.LandInstance.methods.getBuyersCount().call();\r\n            console.log(buyersCount);\r\n\r\n\r\n            var buyersMap = [];\r\n            buyersMap = await this.state.LandInstance.methods.getBuyer().call();\r\n            //console.log(buyersMap);\r\n\r\n            var verified = await this.state.LandInstance.methods.isLandInspector(currentAddress).call();\r\n            //console.log(verified);\r\n            this.setState({ verified: verified });\r\n\r\n            for (let i = 0; i < buyersCount; i++) {\r\n                // var i =3;\r\n                var buyer = await this.state.LandInstance.methods.getBuyerDetails(buyersMap[i]).call();\r\n\r\n                var buyer_verify = await this.state.LandInstance.methods.isVerified(buyersMap[i]).call();\r\n                console.log(buyer_verify);\r\n                buyer.verified = buyer_verify;\r\n\r\n                var not_verify = await this.state.LandInstance.methods.isRejected(buyersMap[i]).call();\r\n                console.log(not_verify);\r\n                buyerTable.push(<tr><td>{i + 1}</td><td>{buyersMap[i]}</td><td>{buyer[0]}</td><td>{buyer[5]}</td><td>{buyer[4]}</td><td>{buyer[1]}</td><td>{buyer[6]}</td><td>{buyer[2]}</td><td><a href={`https://landregistry.infura-ipfs.io/${buyer[3]}`} target=\"_blank\" rel=\"noreferrer\">Click Here</a></td>\r\n                    <td>{buyer.verified.toString()}</td>\r\n                    <td>\r\n                        <Button onClick={this.verifyBuyer(buyersMap[i])} disabled={buyer_verify || not_verify} className=\"button-vote\">\r\n                            Verify\r\n                        </Button>\r\n                    </td>\r\n                    <td>\r\n                        <Button onClick={this.NotverifyBuyer(buyersMap[i], buyer[4], buyer[0])} disabled={buyer_verify || not_verify} className=\"btn btn-danger\">\r\n                            Reject\r\n                        </Button>\r\n                    </td>\r\n                </tr>)\r\n\r\n            }\r\n\r\n        } catch (error) {\r\n            // Catch any errors for any of the above operations.\r\n            alert(\r\n                `Failed to load web3, accounts, or contract. Check console for details.`,\r\n            );\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        if (!this.state.web3) {\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        <h1>\r\n                            <Spinner animation=\"border\" variant=\"primary\" />\r\n                        </h1>\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.state.verified) {\r\n            return (\r\n                <div className=\"content\">\r\n                    <div>\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                <Card className=\"card-chart\">\r\n                                    <CardBody>\r\n                                        <h1>\r\n                                            You are not verified to view this page\r\n                                        </h1>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <DrizzleProvider options={drizzleOptions}>\r\n                <LoadingContainer>\r\n                    <div className=\"content\">\r\n                        <Row>\r\n                            <Col xs=\"12\">\r\n                                <Card>\r\n                                    <CardHeader>\r\n                                        <CardTitle tag=\"h5\">Buyers Info</CardTitle>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <Table className=\"tablesorter\" responsive color=\"black\">\r\n                                            <thead className=\"text-primary\">\r\n                                                <tr>\r\n                                                    <th>#</th>\r\n                                                    <th>Account Address</th>\r\n                                                    <th>Name</th>\r\n                                                    <th>Age</th>\r\n                                                    <th>Email</th>\r\n                                                    <th>City</th>\r\n                                                    <th>Aadhar Card Number</th>\r\n                                                    <th>Pan Card Number</th>\r\n                                                    <th>ID Card Document</th>\r\n                                                    <th>Verification Status</th>\r\n                                                    <th>Verify Buyer</th>\r\n                                                    <th>Reject Buyer</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {buyerTable}\r\n                                            </tbody>\r\n\r\n                                        </Table>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </LoadingContainer>\r\n            </DrizzleProvider>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default BuyerInfo;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\SellerInfo.js",[],"D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\TransactionInfo.js",["222"],"import {\r\n    ContractData, LoadingContainer\r\n} from '@drizzle/react-components';\r\nimport { DrizzleProvider } from '@drizzle/react-plugin';\r\nimport React, { Component } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n// reactstrap components\r\nimport {\r\n    Button, Card, CardBody, CardHeader, CardTitle, Col, Row, Table\r\n} from \"reactstrap\";\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport Land from \"../artifacts/Land.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport '../index.css';\r\n\r\n\r\n\r\nconst drizzleOptions = {\r\n    contracts: [Land]\r\n}\r\n\r\n\r\nvar landTable = [];\r\nvar completed = true;\r\n\r\nclass TransactionInfo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            LandInstance: undefined,\r\n            account: null,\r\n            web3: null,\r\n            verified: '',\r\n        }\r\n    }\r\n\r\n    landTransfer = (landId, newOwner) => async () => {\r\n\r\n        await this.state.LandInstance.methods.LandOwnershipTransfer(\r\n            landId, newOwner\r\n        ).send({\r\n            from: this.state.account,\r\n            gas: 2100000\r\n        });\r\n        //Reload\r\n        console.log(newOwner);\r\n        console.log(completed);\r\n        // this.setState({completed:false});\r\n        completed = false;\r\n        console.log(completed);\r\n\r\n        window.location.reload(false);\r\n\r\n    }\r\n\r\n\r\n    componentDidMount = async () => {\r\n        //For refreshing page only once\r\n        if (!window.location.hash) {\r\n            window.location = window.location + '#loaded';\r\n            window.location.reload();\r\n        }\r\n\r\n        try {\r\n            //Get network provider and web3 instance\r\n            const web3 = await getWeb3();\r\n\r\n            const accounts = await web3.eth.getAccounts();\r\n\r\n            const currentAddress = await web3.currentProvider.selectedAddress;\r\n            //console.log(currentAddress);\r\n            const networkId = await web3.eth.net.getId();\r\n            const deployedNetwork = Land.networks[networkId];\r\n            const instance = new web3.eth.Contract(\r\n                Land.abi,\r\n                deployedNetwork && deployedNetwork.address,\r\n            );\r\n\r\n            this.setState({ LandInstance: instance, web3: web3, account: accounts[0] });\r\n\r\n            var verified = await this.state.LandInstance.methods.isLandInspector(currentAddress).call();\r\n            //console.log(verified);\r\n            this.setState({ verified: verified });\r\n\r\n            var count = await this.state.LandInstance.methods.getLandsCount().call();\r\n            count = parseInt(count);\r\n            var rowsArea = [];\r\n            var rowsCity = [];\r\n            var rowsState = [];\r\n            var rowsPrice = [];\r\n            var rowsPID = [];\r\n            var rowsSurvey = [];\r\n\r\n\r\n            for (var i = 1; i < count + 1; i++) {\r\n                rowsArea.push(<ContractData contract=\"Land\" method=\"getArea\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n                rowsCity.push(<ContractData contract=\"Land\" method=\"getCity\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n                rowsState.push(<ContractData contract=\"Land\" method=\"getState\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n                rowsPrice.push(<ContractData contract=\"Land\" method=\"getPrice\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n                rowsPID.push(<ContractData contract=\"Land\" method=\"getPID\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n                rowsSurvey.push(<ContractData contract=\"Land\" method=\"getSurveyNumber\" methodArgs={[i, { from: \"0xa42A8B478E5e010609725C2d5A8fe6c0C4A939cB\" }]} />);\r\n            }\r\n            for ( i = 0; i < count; i++) {\r\n                var request = await this.state.LandInstance.methods.getRequestDetails(i + 1).call();\r\n                var approved = await this.state.LandInstance.methods.isApproved(i + 1).call();\r\n                // console.log(approved);\r\n                // console.log(request[3]);\r\n                var disabled = request[3] && completed;\r\n                console.log(\"Disabled: \", disabled);\r\n                console.log(\"request[3]: \", request[3]);\r\n                console.log(\"completed: \", completed);\r\n\r\n                var owner = await this.state.LandInstance.methods.getLandOwner(i + 1).call();\r\n                landTable.push(<tr><td>{i + 1}</td><td>{owner}</td><td>{rowsArea[i]}</td><td>{rowsCity[i]}</td><td>{rowsState[i]}</td><td>{rowsPrice[i]}</td><td>{rowsPID[i]}</td><td>{rowsSurvey[i]}</td>\r\n                    <td>\r\n                        <Button onClick={this.landTransfer(i + 1, request[1])} disabled={!disabled} className=\"button-vote\">\r\n                            Verify Transaction\r\n                        </Button>\r\n                    </td>\r\n                </tr>)\r\n\r\n\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            // Catch any errors for any of the above operations.\r\n            alert(\r\n                `Failed to load web3, accounts, or contract. Check console for details.`,\r\n            );\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        if (!this.state.web3) {\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        <h1>\r\n                            <Spinner animation=\"border\" variant=\"primary\" />\r\n                        </h1>\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.state.verified) {\r\n            return (\r\n                <div className=\"content\">\r\n                    <div>\r\n                        <Row>\r\n                            <Col xs=\"6\">\r\n                                <Card className=\"card-chart\">\r\n                                    <CardBody>\r\n                                        <h1>\r\n                                            You are not verified to view this page\r\n                                        </h1>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <DrizzleProvider options={drizzleOptions}>\r\n                <LoadingContainer>\r\n                    <div className=\"content\">\r\n                        <Row>\r\n                            <Col xs=\"12\">\r\n                                <Card>\r\n                                    <CardHeader>\r\n                                        <CardTitle tag=\"h6\">Lands Info</CardTitle>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <Table className=\"tablesorter\" responsive color=\"black\">\r\n                                            <thead className=\"text-primary\">\r\n                                                <tr>\r\n                                                    <th>#</th>\r\n                                                    <th>Owner ID</th>\r\n                                                    <th>Area</th>\r\n                                                    <th>City</th>\r\n                                                    <th>State</th>\r\n                                                    <th>Price</th>\r\n                                                    <th>Property PID</th>\r\n                                                    <th>Survey Number</th>\r\n                                                    <th>Verify Land Transfer</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {landTable}\r\n                                            </tbody>\r\n                                        </Table>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </div>\r\n                </LoadingContainer>\r\n            </DrizzleProvider>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default TransactionInfo;\r\n","D:\\BE COMP SS\\Final Year Project\\5\\land2\\land2\\client\\src\\views\\3Dmodelling.js",["223","224","225","226","227","228","229","230","231","232","233"],"import {\r\n    ContractData, LoadingContainer\r\n  } from '@drizzle/react-components';\r\n  import { DrizzleProvider } from '@drizzle/react-plugin';\r\n  import React, { Component } from 'react';\r\n  import { Spinner } from 'react-bootstrap';\r\n  // reactstrap components\r\n  import {\r\n    Card, CardBody, Col, Row\r\n  } from \"reactstrap\";\r\n  import Land from \"../artifacts/Land.json\";\r\n  import getWeb3 from \"../getWeb3\";\r\n  import \"../index.css\";\r\n\r\n\r\n  function imagedisplay(){\r\n    return(\r\n        <>\r\n            <div class=\"box\">\r\n                <div>Sample text</div>\r\n                <div>\r\n                    <model-viewer src=\"IMPisland.glb\" camera-controls></model-viewer>\r\n                </div>\r\n\r\n                <div>\r\n                    <model-viewer src=\"hillmap.glb\" camera-controls></model-viewer>\r\n                </div>\r\n\r\n                <div>\r\n                    <model-viewer src=\"mountain.glb\" camera-controls></model-viewer>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n  }\r\n\r\n  export default imagedisplay;\r\n",{"ruleId":"234","severity":1,"message":"235","line":6,"column":8,"nodeType":"236","messageId":"237","endLine":6,"endColumn":11},{"ruleId":"234","severity":1,"message":"238","line":8,"column":33,"nodeType":"236","messageId":"237","endLine":8,"endColumn":41},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","replacedBy":"242"},{"ruleId":"234","severity":1,"message":"243","line":10,"column":7,"nodeType":"236","messageId":"237","endLine":10,"endColumn":21},{"ruleId":"244","severity":1,"message":"245","line":67,"column":17,"nodeType":"246","endLine":67,"endColumn":21},{"ruleId":"234","severity":1,"message":"247","line":10,"column":8,"nodeType":"236","messageId":"237","endLine":10,"endColumn":19},{"ruleId":"234","severity":1,"message":"248","line":11,"column":8,"nodeType":"236","messageId":"237","endLine":11,"endColumn":13},{"ruleId":"234","severity":1,"message":"238","line":3,"column":25,"nodeType":"236","messageId":"237","endLine":3,"endColumn":33},{"ruleId":"234","severity":1,"message":"247","line":11,"column":8,"nodeType":"236","messageId":"237","endLine":11,"endColumn":19},{"ruleId":"234","severity":1,"message":"249","line":12,"column":8,"nodeType":"236","messageId":"237","endLine":12,"endColumn":17},{"ruleId":"234","severity":1,"message":"250","line":12,"column":8,"nodeType":"236","messageId":"237","endLine":12,"endColumn":19},{"ruleId":"234","severity":1,"message":"251","line":2,"column":8,"nodeType":"236","messageId":"237","endLine":2,"endColumn":26},{"ruleId":"234","severity":1,"message":"252","line":8,"column":3,"nodeType":"236","messageId":"237","endLine":8,"endColumn":9},{"ruleId":"234","severity":1,"message":"253","line":10,"column":3,"nodeType":"236","messageId":"237","endLine":10,"endColumn":17},{"ruleId":"234","severity":1,"message":"254","line":11,"column":3,"nodeType":"236","messageId":"237","endLine":11,"endColumn":15},{"ruleId":"234","severity":1,"message":"255","line":12,"column":3,"nodeType":"236","messageId":"237","endLine":12,"endColumn":15},{"ruleId":"234","severity":1,"message":"256","line":13,"column":3,"nodeType":"236","messageId":"237","endLine":13,"endColumn":23},{"ruleId":"234","severity":1,"message":"257","line":15,"column":3,"nodeType":"236","messageId":"237","endLine":15,"endColumn":13},{"ruleId":"234","severity":1,"message":"258","line":18,"column":3,"nodeType":"236","messageId":"237","endLine":18,"endColumn":10},{"ruleId":"234","severity":1,"message":"252","line":21,"column":10,"nodeType":"236","messageId":"237","endLine":21,"endColumn":16},{"ruleId":"234","severity":1,"message":"259","line":10,"column":26,"nodeType":"236","messageId":"237","endLine":10,"endColumn":43},{"ruleId":"234","severity":1,"message":"260","line":13,"column":3,"nodeType":"236","messageId":"237","endLine":13,"endColumn":19},{"ruleId":"234","severity":1,"message":"261","line":39,"column":9,"nodeType":"236","messageId":"237","endLine":39,"endColumn":20},{"ruleId":"262","severity":1,"message":"263","line":48,"column":9,"nodeType":"246","messageId":"264","endLine":53,"endColumn":10,"fix":"265"},{"ruleId":"262","severity":1,"message":"263","line":60,"column":9,"nodeType":"246","messageId":"264","endLine":65,"endColumn":10,"fix":"266"},{"ruleId":"234","severity":1,"message":"267","line":25,"column":5,"nodeType":"236","messageId":"237","endLine":25,"endColumn":13},{"ruleId":"234","severity":1,"message":"268","line":26,"column":5,"nodeType":"236","messageId":"237","endLine":26,"endColumn":8},{"ruleId":"234","severity":1,"message":"269","line":26,"column":5,"nodeType":"236","messageId":"237","endLine":26,"endColumn":14},{"ruleId":"270","severity":1,"message":"271","line":132,"column":16,"nodeType":"236","messageId":"272","endLine":132,"endColumn":17},{"ruleId":"234","severity":1,"message":"273","line":13,"column":8,"nodeType":"236","messageId":"237","endLine":13,"endColumn":20},{"ruleId":"234","severity":1,"message":"274","line":24,"column":5,"nodeType":"236","messageId":"237","endLine":24,"endColumn":13},{"ruleId":"234","severity":1,"message":"269","line":24,"column":5,"nodeType":"236","messageId":"237","endLine":24,"endColumn":14},{"ruleId":"234","severity":1,"message":"275","line":12,"column":3,"nodeType":"236","messageId":"237","endLine":12,"endColumn":11},{"ruleId":"234","severity":1,"message":"274","line":91,"column":11,"nodeType":"236","messageId":"237","endLine":91,"endColumn":19},{"ruleId":"234","severity":1,"message":"276","line":22,"column":5,"nodeType":"236","messageId":"237","endLine":22,"endColumn":14},{"ruleId":"234","severity":1,"message":"277","line":106,"column":21,"nodeType":"236","messageId":"237","endLine":106,"endColumn":29},{"ruleId":"234","severity":1,"message":"278","line":2,"column":5,"nodeType":"236","messageId":"237","endLine":2,"endColumn":17},{"ruleId":"234","severity":1,"message":"279","line":2,"column":19,"nodeType":"236","messageId":"237","endLine":2,"endColumn":35},{"ruleId":"234","severity":1,"message":"280","line":4,"column":12,"nodeType":"236","messageId":"237","endLine":4,"endColumn":27},{"ruleId":"234","severity":1,"message":"281","line":5,"column":19,"nodeType":"236","messageId":"237","endLine":5,"endColumn":28},{"ruleId":"234","severity":1,"message":"282","line":6,"column":12,"nodeType":"236","messageId":"237","endLine":6,"endColumn":19},{"ruleId":"234","severity":1,"message":"283","line":9,"column":5,"nodeType":"236","messageId":"237","endLine":9,"endColumn":9},{"ruleId":"234","severity":1,"message":"284","line":9,"column":11,"nodeType":"236","messageId":"237","endLine":9,"endColumn":19},{"ruleId":"234","severity":1,"message":"285","line":9,"column":21,"nodeType":"236","messageId":"237","endLine":9,"endColumn":24},{"ruleId":"234","severity":1,"message":"286","line":9,"column":26,"nodeType":"236","messageId":"237","endLine":9,"endColumn":29},{"ruleId":"234","severity":1,"message":"287","line":11,"column":10,"nodeType":"236","messageId":"237","endLine":11,"endColumn":14},{"ruleId":"234","severity":1,"message":"288","line":12,"column":10,"nodeType":"236","messageId":"237","endLine":12,"endColumn":17},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","no-native-reassign",["289"],"no-negated-in-lhs",["290"],"'drizzleOptions' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'FixedPlugin' is defined but never used.","'SDash' is defined but never used.","'Dashboard' is defined but never used.","'LIDashboard' is defined but never used.","'ApproveTransaction' is defined but never used.","'Button' is defined but never used.","'DropdownToggle' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'InputGroup' is defined but never used.","'NavLink' is defined but never used.","'ReactstrapNavLink' is defined but never used.","'backgroundColors' is defined but never used.","'linkOnClick' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"291","text":"292"},{"range":"293","text":"292"},"'verified' is defined but never used.","'row' is assigned a value but never used.","'landOwner' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'imagedisplay' is defined but never used.","'rowsIpfs' is assigned a value but never used.","'CardText' is defined but never used.","'completed' is assigned a value but never used.","'approved' is assigned a value but never used.","'ContractData' is defined but never used.","'LoadingContainer' is defined but never used.","'DrizzleProvider' is defined but never used.","'Component' is defined but never used.","'Spinner' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'Land' is defined but never used.","'getWeb3' is defined but never used.","no-global-assign","no-unsafe-negation",[1623,1623]," rel=\"noreferrer\"",[1951,1951]]