{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst protons = require('protons');\n\nconst proto = protons(require('./dag.proto.js'));\n\nconst resolver = require('./resolver');\n\nconst DAGLink = require('./dag-link');\n\nconst DAGNode = require('./dag-node');\n\nconst multihashing = require('multihashing-async');\n\nconst waterfall = require('async/waterfall');\n\nconst setImmediate = require('async/setImmediate');\n\nexports = module.exports;\n/**\n * @callback CidCallback\n * @param {?Error} error - Error if getting the CID failed\n * @param {?CID} cid - CID if call was successful\n */\n\n/**\n * Get the CID of the DAG-Node.\n *\n * @param {Object} dagNode - Internal representation\n * @param {Object} [options] - Options to create the CID\n * @param {number} [options.version] - CID version number. Defaults to zero if hashAlg == 'sha2-256'; otherwise, 1.\n * @param {string} [options.hashAlg] - Defaults to hashAlg for the resolver\n * @param {CidCallback} callback - Callback that handles the return value\n * @returns {void}\n */\n\nfunction cid(dagNode, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  const hashAlg = options.hashAlg || resolver.defaultHashAlg;\n  let version = options.version;\n\n  if (typeof version === 'undefined') {\n    version = hashAlg === 'sha2-256' ? 0 : 1;\n  }\n\n  waterfall([cb => {\n    if (Buffer.isBuffer(dagNode)) {\n      return cb(null, dagNode);\n    }\n\n    serialize(dagNode, cb);\n  }, (serialized, cb) => multihashing(serialized, hashAlg, cb), (mh, cb) => cb(null, new CID(version, resolver.multicodec, mh))], callback);\n}\n\nfunction serialize(node, callback) {\n  let serialized;\n  let {\n    data,\n    links = []\n  } = node; // If the node is not an instance of a DAGNode, the link.hash might be a Base58 encoded string; decode it\n\n  if (!DAGNode.isDAGNode(node) && links) {\n    links = links.map(link => {\n      return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);\n    });\n  }\n\n  try {\n    serialized = proto.PBNode.encode(toProtoBuf({\n      data,\n      links\n    }));\n  } catch (err) {\n    return callback(err);\n  }\n\n  callback(null, serialized);\n}\n\nfunction deserialize(buffer, callback) {\n  const pbn = proto.PBNode.decode(buffer);\n  const links = pbn.Links.map(link => {\n    return new DAGLink(link.Name, link.Tsize, link.Hash);\n  });\n  const data = pbn.Data == null ? Buffer.alloc(0) : pbn.Data;\n  setImmediate(() => callback(null, new DAGNode(data, links, buffer.length)));\n}\n\nfunction toProtoBuf(node) {\n  const pbn = {};\n\n  if (node.data && node.data.length > 0) {\n    pbn.Data = node.data;\n  } else {\n    // NOTE: this has to be null in order to match go-ipfs serialization `null !== new Buffer(0)`\n    pbn.Data = null;\n  }\n\n  if (node.links && node.links.length > 0) {\n    pbn.Links = node.links.map(link => ({\n      Hash: link.cid.buffer,\n      Name: link.name,\n      Tsize: link.size\n    }));\n  } else {\n    pbn.Links = null;\n  }\n\n  return pbn;\n}\n\nexports.serialize = serialize;\nexports.deserialize = deserialize;\nexports.cid = cid;","map":{"version":3,"sources":["D:/BE COMP SS/Final Year Project/5/land2/land2/client/node_modules/ipld-dag-pb/src/util.js"],"names":["CID","require","protons","proto","resolver","DAGLink","DAGNode","multihashing","waterfall","setImmediate","exports","module","cid","dagNode","options","callback","hashAlg","defaultHashAlg","version","cb","Buffer","isBuffer","serialize","serialized","mh","multicodec","node","data","links","isDAGNode","map","link","isDAGLink","util","createDagLinkFromB58EncodedHash","PBNode","encode","toProtoBuf","err","deserialize","buffer","pbn","decode","Links","Name","Tsize","Hash","Data","alloc","length","name","size"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst protons = require('protons')\nconst proto = protons(require('./dag.proto.js'))\nconst resolver = require('./resolver')\nconst DAGLink = require('./dag-link')\nconst DAGNode = require('./dag-node')\nconst multihashing = require('multihashing-async')\nconst waterfall = require('async/waterfall')\nconst setImmediate = require('async/setImmediate')\n\nexports = module.exports\n\n/**\n * @callback CidCallback\n * @param {?Error} error - Error if getting the CID failed\n * @param {?CID} cid - CID if call was successful\n */\n/**\n * Get the CID of the DAG-Node.\n *\n * @param {Object} dagNode - Internal representation\n * @param {Object} [options] - Options to create the CID\n * @param {number} [options.version] - CID version number. Defaults to zero if hashAlg == 'sha2-256'; otherwise, 1.\n * @param {string} [options.hashAlg] - Defaults to hashAlg for the resolver\n * @param {CidCallback} callback - Callback that handles the return value\n * @returns {void}\n */\nfunction cid (dagNode, options, callback) {\n  if (typeof options === 'function') {\n    callback = options\n    options = {}\n  }\n  options = options || {}\n  const hashAlg = options.hashAlg || resolver.defaultHashAlg\n  let version = options.version\n  if (typeof version === 'undefined') {\n    version = hashAlg === 'sha2-256' ? 0 : 1\n  }\n  waterfall([\n    (cb) => {\n      if (Buffer.isBuffer(dagNode)) {\n        return cb(null, dagNode)\n      }\n\n      serialize(dagNode, cb)\n    },\n    (serialized, cb) => multihashing(serialized, hashAlg, cb),\n    (mh, cb) => cb(null, new CID(version, resolver.multicodec, mh))\n  ], callback)\n}\n\nfunction serialize (node, callback) {\n  let serialized\n  let {\n    data,\n    links = []\n  } = node\n\n  // If the node is not an instance of a DAGNode, the link.hash might be a Base58 encoded string; decode it\n  if (!DAGNode.isDAGNode(node) && links) {\n    links = links.map((link) => {\n      return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link)\n    })\n  }\n\n  try {\n    serialized = proto.PBNode.encode(toProtoBuf({\n      data, links\n    }))\n  } catch (err) {\n    return callback(err)\n  }\n\n  callback(null, serialized)\n}\n\nfunction deserialize (buffer, callback) {\n  const pbn = proto.PBNode.decode(buffer)\n\n  const links = pbn.Links.map((link) => {\n    return new DAGLink(link.Name, link.Tsize, link.Hash)\n  })\n\n  const data = pbn.Data == null ? Buffer.alloc(0) : pbn.Data\n\n  setImmediate(() => callback(null, new DAGNode(data, links, buffer.length)))\n}\n\nfunction toProtoBuf (node) {\n  const pbn = {}\n\n  if (node.data && node.data.length > 0) {\n    pbn.Data = node.data\n  } else {\n    // NOTE: this has to be null in order to match go-ipfs serialization `null !== new Buffer(0)`\n    pbn.Data = null\n  }\n\n  if (node.links && node.links.length > 0) {\n    pbn.Links = node.links\n      .map((link) => ({\n        Hash: link.cid.buffer,\n        Name: link.name,\n        Tsize: link.size\n      }))\n  } else {\n    pbn.Links = null\n  }\n\n  return pbn\n}\n\nexports.serialize = serialize\nexports.deserialize = deserialize\nexports.cid = cid\n"]},"metadata":{},"sourceType":"script"}