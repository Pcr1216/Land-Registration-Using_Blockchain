{"ast":null,"code":"'use strict';\n/* global self */\n\nconst multiaddr = require('multiaddr');\n\nconst loadCommands = require('./utils/load-commands');\n\nconst getConfig = require('./utils/default-config');\n\nconst sendRequest = require('./utils/send-request');\n\nfunction ipfsClient(hostOrMultiaddr, port, opts) {\n  const config = getConfig();\n\n  try {\n    const maddr = multiaddr(hostOrMultiaddr).nodeAddress();\n    config.host = maddr.address;\n    config.port = maddr.port;\n  } catch (e) {\n    if (typeof hostOrMultiaddr === 'string') {\n      config.host = hostOrMultiaddr;\n      config.port = port && typeof port !== 'object' ? port : config.port;\n    }\n  }\n\n  let lastIndex = arguments.length;\n\n  while (!opts && lastIndex-- > 0) {\n    opts = arguments[lastIndex];\n    if (opts) break;\n  }\n\n  Object.assign(config, opts); // autoconfigure in browser\n\n  if (!config.host && typeof self !== 'undefined') {\n    const split = self.location.host.split(':');\n    config.host = split[0];\n    config.port = split[1];\n  }\n\n  const requestAPI = sendRequest(config);\n  const cmds = loadCommands(requestAPI, config);\n  cmds.send = requestAPI;\n  cmds.Buffer = Buffer; // Added buffer in types (this should be removed once a breaking change is release)\n\n  return cmds;\n}\n\nmodule.exports = ipfsClient;","map":{"version":3,"sources":["D:/BE COMP SS/Final Year Project/5/land2/land2/client/node_modules/ipfs-http-client/src/index.js"],"names":["multiaddr","require","loadCommands","getConfig","sendRequest","ipfsClient","hostOrMultiaddr","port","opts","config","maddr","nodeAddress","host","address","e","lastIndex","arguments","length","Object","assign","self","split","location","requestAPI","cmds","send","Buffer","module","exports"],"mappings":"AAAA;AACA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,uBAAD,CAA5B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,wBAAD,CAAzB;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,sBAAD,CAA3B;;AAEA,SAASI,UAAT,CAAqBC,eAArB,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkD;AAChD,QAAMC,MAAM,GAAGN,SAAS,EAAxB;;AAEA,MAAI;AACF,UAAMO,KAAK,GAAGV,SAAS,CAACM,eAAD,CAAT,CAA2BK,WAA3B,EAAd;AACAF,IAAAA,MAAM,CAACG,IAAP,GAAcF,KAAK,CAACG,OAApB;AACAJ,IAAAA,MAAM,CAACF,IAAP,GAAcG,KAAK,CAACH,IAApB;AACD,GAJD,CAIE,OAAOO,CAAP,EAAU;AACV,QAAI,OAAOR,eAAP,KAA2B,QAA/B,EAAyC;AACvCG,MAAAA,MAAM,CAACG,IAAP,GAAcN,eAAd;AACAG,MAAAA,MAAM,CAACF,IAAP,GAAcA,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxB,GAAmCA,IAAnC,GAA0CE,MAAM,CAACF,IAA/D;AACD;AACF;;AAED,MAAIQ,SAAS,GAAGC,SAAS,CAACC,MAA1B;;AACA,SAAO,CAACT,IAAD,IAASO,SAAS,KAAK,CAA9B,EAAiC;AAC/BP,IAAAA,IAAI,GAAGQ,SAAS,CAACD,SAAD,CAAhB;AACA,QAAIP,IAAJ,EAAU;AACX;;AAEDU,EAAAA,MAAM,CAACC,MAAP,CAAcV,MAAd,EAAsBD,IAAtB,EApBgD,CAsBhD;;AACA,MAAI,CAACC,MAAM,CAACG,IAAR,IACF,OAAOQ,IAAP,KAAgB,WADlB,EAC+B;AAC7B,UAAMC,KAAK,GAAGD,IAAI,CAACE,QAAL,CAAcV,IAAd,CAAmBS,KAAnB,CAAyB,GAAzB,CAAd;AACAZ,IAAAA,MAAM,CAACG,IAAP,GAAcS,KAAK,CAAC,CAAD,CAAnB;AACAZ,IAAAA,MAAM,CAACF,IAAP,GAAcc,KAAK,CAAC,CAAD,CAAnB;AACD;;AAED,QAAME,UAAU,GAAGnB,WAAW,CAACK,MAAD,CAA9B;AACA,QAAMe,IAAI,GAAGtB,YAAY,CAACqB,UAAD,EAAad,MAAb,CAAzB;AACAe,EAAAA,IAAI,CAACC,IAAL,GAAYF,UAAZ;AACAC,EAAAA,IAAI,CAACE,MAAL,GAAcA,MAAd,CAjCgD,CAiC3B;;AAErB,SAAOF,IAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBvB,UAAjB","sourcesContent":["'use strict'\n/* global self */\n\nconst multiaddr = require('multiaddr')\nconst loadCommands = require('./utils/load-commands')\nconst getConfig = require('./utils/default-config')\nconst sendRequest = require('./utils/send-request')\n\nfunction ipfsClient (hostOrMultiaddr, port, opts) {\n  const config = getConfig()\n\n  try {\n    const maddr = multiaddr(hostOrMultiaddr).nodeAddress()\n    config.host = maddr.address\n    config.port = maddr.port\n  } catch (e) {\n    if (typeof hostOrMultiaddr === 'string') {\n      config.host = hostOrMultiaddr\n      config.port = port && typeof port !== 'object' ? port : config.port\n    }\n  }\n\n  let lastIndex = arguments.length\n  while (!opts && lastIndex-- > 0) {\n    opts = arguments[lastIndex]\n    if (opts) break\n  }\n\n  Object.assign(config, opts)\n\n  // autoconfigure in browser\n  if (!config.host &&\n    typeof self !== 'undefined') {\n    const split = self.location.host.split(':')\n    config.host = split[0]\n    config.port = split[1]\n  }\n\n  const requestAPI = sendRequest(config)\n  const cmds = loadCommands(requestAPI, config)\n  cmds.send = requestAPI\n  cmds.Buffer = Buffer // Added buffer in types (this should be removed once a breaking change is release)\n\n  return cmds\n}\n\nmodule.exports = ipfsClient\n"]},"metadata":{},"sourceType":"script"}