{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\n\nconst withIs = require('class-is');\n\nclass DAGNode {\n  constructor(data, links, serializedSize) {\n    if (serializedSize !== 0) {\n      assert(serializedSize, 'A DAGNode requires it\\'s serialized size');\n    }\n\n    this._data = data || Buffer.alloc(0);\n    this._links = links || [];\n    this._serializedSize = serializedSize;\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.data,\n        links: this.links.map(l => l.toJSON()),\n        size: this.size\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  toString() {\n    return `DAGNode <data: \"${this.data.toString('base64')}\", links: ${this.links.length}, size: ${this.size}>`;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  set data(data) {\n    throw new Error(\"Can't set property: 'data' is immutable\");\n  }\n\n  get links() {\n    return this._links;\n  }\n\n  set links(links) {\n    throw new Error(\"Can't set property: 'links' is immutable\");\n  }\n\n  get size() {\n    if (this._size === undefined) {\n      this._size = this.links.reduce((sum, l) => sum + l.size, this._serializedSize);\n    }\n\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGNode, {\n  className: 'DAGNode',\n  symbolName: '@ipld/js-ipld-dag-pb/dagnode'\n});\nexports.create = require('./create');\nexports.clone = require('./clone');\nexports.addLink = require('./addLink');\nexports.rmLink = require('./rmLink');","map":{"version":3,"sources":["D:/BE COMP SS/Final Year Project/5/land2/land2/client/node_modules/ipld-dag-pb/src/dag-node/index.js"],"names":["assert","require","withIs","DAGNode","constructor","data","links","serializedSize","_data","Buffer","alloc","_links","_serializedSize","toJSON","_json","Object","freeze","map","l","size","assign","toString","length","Error","_size","undefined","reduce","sum","exports","module","className","symbolName","create","clone","addLink","rmLink"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAME,OAAN,CAAc;AACZC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,KAAR,EAAeC,cAAf,EAA+B;AACxC,QAAIA,cAAc,KAAK,CAAvB,EAA0B;AACxBP,MAAAA,MAAM,CAACO,cAAD,EAAiB,0CAAjB,CAAN;AACD;;AAED,SAAKC,KAAL,GAAaH,IAAI,IAAII,MAAM,CAACC,KAAP,CAAa,CAAb,CAArB;AACA,SAAKC,MAAL,GAAcL,KAAK,IAAI,EAAvB;AACA,SAAKM,eAAL,GAAuBL,cAAvB;AACD;;AAEDM,EAAAA,MAAM,GAAI;AACR,QAAI,CAAC,KAAKC,KAAV,EAAiB;AACf,WAAKA,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc;AACzBX,QAAAA,IAAI,EAAE,KAAKA,IADc;AAEzBC,QAAAA,KAAK,EAAE,KAAKA,KAAL,CAAWW,GAAX,CAAgBC,CAAD,IAAOA,CAAC,CAACL,MAAF,EAAtB,CAFkB;AAGzBM,QAAAA,IAAI,EAAE,KAAKA;AAHc,OAAd,CAAb;AAKD;;AAED,WAAOJ,MAAM,CAACK,MAAP,CAAc,EAAd,EAAkB,KAAKN,KAAvB,CAAP;AACD;;AAEDO,EAAAA,QAAQ,GAAI;AACV,WAAQ,mBAAkB,KAAKhB,IAAL,CAAUgB,QAAV,CAAmB,QAAnB,CAA6B,aAAY,KAAKf,KAAL,CAAWgB,MAAO,WAAU,KAAKH,IAAK,GAAzG;AACD;;AAEO,MAAJd,IAAI,GAAI;AACV,WAAO,KAAKG,KAAZ;AACD;;AAEO,MAAJH,IAAI,CAAEA,IAAF,EAAQ;AACd,UAAM,IAAIkB,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEQ,MAALjB,KAAK,GAAI;AACX,WAAO,KAAKK,MAAZ;AACD;;AAEQ,MAALL,KAAK,CAAEA,KAAF,EAAS;AAChB,UAAM,IAAIiB,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAEO,MAAJJ,IAAI,GAAI;AACV,QAAI,KAAKK,KAAL,KAAeC,SAAnB,EAA8B;AAC5B,WAAKD,KAAL,GAAa,KAAKlB,KAAL,CAAWoB,MAAX,CAAkB,CAACC,GAAD,EAAMT,CAAN,KAAYS,GAAG,GAAGT,CAAC,CAACC,IAAtC,EAA4C,KAAKP,eAAjD,CAAb;AACD;;AAED,WAAO,KAAKY,KAAZ;AACD;;AAEO,MAAJL,IAAI,CAAEA,IAAF,EAAQ;AACd,UAAM,IAAII,KAAJ,CAAU,yCAAV,CAAN;AACD;;AArDW;;AAwDdK,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB1B,MAAM,CAACC,OAAD,EAAU;AAAE2B,EAAAA,SAAS,EAAE,SAAb;AAAwBC,EAAAA,UAAU,EAAE;AAApC,CAAV,CAAjC;AACAH,OAAO,CAACI,MAAR,GAAiB/B,OAAO,CAAC,UAAD,CAAxB;AACA2B,OAAO,CAACK,KAAR,GAAgBhC,OAAO,CAAC,SAAD,CAAvB;AACA2B,OAAO,CAACM,OAAR,GAAkBjC,OAAO,CAAC,WAAD,CAAzB;AACA2B,OAAO,CAACO,MAAR,GAAiBlC,OAAO,CAAC,UAAD,CAAxB","sourcesContent":["'use strict'\n\nconst assert = require('assert')\nconst withIs = require('class-is')\n\nclass DAGNode {\n  constructor (data, links, serializedSize) {\n    if (serializedSize !== 0) {\n      assert(serializedSize, 'A DAGNode requires it\\'s serialized size')\n    }\n\n    this._data = data || Buffer.alloc(0)\n    this._links = links || []\n    this._serializedSize = serializedSize\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.data,\n        links: this.links.map((l) => l.toJSON()),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <data: \"${this.data.toString('base64')}\", links: ${this.links.length}, size: ${this.size}>`\n  }\n\n  get data () {\n    return this._data\n  }\n\n  set data (data) {\n    throw new Error(\"Can't set property: 'data' is immutable\")\n  }\n\n  get links () {\n    return this._links\n  }\n\n  set links (links) {\n    throw new Error(\"Can't set property: 'links' is immutable\")\n  }\n\n  get size () {\n    if (this._size === undefined) {\n      this._size = this.links.reduce((sum, l) => sum + l.size, this._serializedSize)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGNode, { className: 'DAGNode', symbolName: '@ipld/js-ipld-dag-pb/dagnode' })\nexports.create = require('./create')\nexports.clone = require('./clone')\nexports.addLink = require('./addLink')\nexports.rmLink = require('./rmLink')\n"]},"metadata":{},"sourceType":"script"}