{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst ConcatStream = require('concat-stream');\n\nconst once = require('once');\n\nconst isStream = require('is-stream');\n\nconst isString = require('lodash/isString');\n\nconst isSource = require('is-pull-stream').isSource;\n\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter');\n\nconst SendFilesStream = require('../utils/send-files-stream');\n\nmodule.exports = send => {\n  const createAddStream = SendFilesStream(send, 'add');\n  const add = promisify((_files, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options;\n      options = null;\n    }\n\n    const callback = once(_callback);\n\n    if (!options) {\n      options = {};\n    }\n\n    options.converter = FileResultStreamConverter; // Buffer, pull stream or Node.js stream\n\n    const isBufferOrStream = obj => Buffer.isBuffer(obj) || isStream.readable(obj) || isSource(obj); // An object like { content?, path? }, where content isBufferOrStream and path isString\n\n\n    const isContentObject = obj => {\n      if (typeof obj !== 'object') return false; // path is optional if content is present\n\n      if (obj.content) return isBufferOrStream(obj.content); // path must be a non-empty string if no content\n\n      return Boolean(obj.path) && isString(obj.path);\n    }; // An input atom: a buffer, stream or content object\n\n\n    const isInput = obj => isBufferOrStream(obj) || isContentObject(obj); // All is ok if data isInput or data is an array of isInput\n\n\n    const ok = isInput(_files) || Array.isArray(_files) && _files.every(isInput);\n\n    if (!ok) {\n      return callback(new Error('invalid input: expected buffer, readable stream, pull stream, object or array of objects'));\n    }\n\n    const files = [].concat(_files);\n    const stream = createAddStream({\n      qs: options\n    });\n    const concat = ConcatStream(result => callback(null, result));\n    stream.once('error', callback);\n    stream.pipe(concat);\n    files.forEach(file => stream.write(file));\n    stream.end();\n  });\n  return function () {\n    const args = Array.from(arguments); // If we files.add(<pull stream>), then promisify thinks the pull stream is\n    // a callback! Add an empty options object in this case so that a promise\n    // is returned.\n\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({});\n    }\n\n    return add.apply(null, args);\n  };\n};","map":{"version":3,"sources":["D:/BE COMP SS/Final Year Project/5/land2/land2/client/node_modules/ipfs-http-client/src/files-regular/add.js"],"names":["promisify","require","ConcatStream","once","isStream","isString","isSource","FileResultStreamConverter","SendFilesStream","module","exports","send","createAddStream","add","_files","options","_callback","callback","converter","isBufferOrStream","obj","Buffer","isBuffer","readable","isContentObject","content","Boolean","path","isInput","ok","Array","isArray","every","Error","files","concat","stream","qs","result","pipe","forEach","file","write","end","args","from","arguments","length","push","apply"],"mappings":"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","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst ConcatStream = require('concat-stream')\nconst once = require('once')\nconst isStream = require('is-stream')\nconst isString = require('lodash/isString')\nconst isSource = require('is-pull-stream').isSource\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter')\nconst SendFilesStream = require('../utils/send-files-stream')\n\nmodule.exports = (send) => {\n  const createAddStream = SendFilesStream(send, 'add')\n\n  const add = promisify((_files, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options\n      options = null\n    }\n\n    const callback = once(_callback)\n\n    if (!options) {\n      options = {}\n    }\n    options.converter = FileResultStreamConverter\n\n    // Buffer, pull stream or Node.js stream\n    const isBufferOrStream = obj => Buffer.isBuffer(obj) || isStream.readable(obj) || isSource(obj)\n    // An object like { content?, path? }, where content isBufferOrStream and path isString\n    const isContentObject = obj => {\n      if (typeof obj !== 'object') return false\n      // path is optional if content is present\n      if (obj.content) return isBufferOrStream(obj.content)\n      // path must be a non-empty string if no content\n      return Boolean(obj.path) && isString(obj.path)\n    }\n    // An input atom: a buffer, stream or content object\n    const isInput = obj => isBufferOrStream(obj) || isContentObject(obj)\n    // All is ok if data isInput or data is an array of isInput\n    const ok = isInput(_files) || (Array.isArray(_files) && _files.every(isInput))\n\n    if (!ok) {\n      return callback(new Error('invalid input: expected buffer, readable stream, pull stream, object or array of objects'))\n    }\n\n    const files = [].concat(_files)\n\n    const stream = createAddStream({ qs: options })\n    const concat = ConcatStream((result) => callback(null, result))\n    stream.once('error', callback)\n    stream.pipe(concat)\n\n    files.forEach((file) => stream.write(file))\n    stream.end()\n  })\n\n  return function () {\n    const args = Array.from(arguments)\n\n    // If we files.add(<pull stream>), then promisify thinks the pull stream is\n    // a callback! Add an empty options object in this case so that a promise\n    // is returned.\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({})\n    }\n\n    return add.apply(null, args)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}