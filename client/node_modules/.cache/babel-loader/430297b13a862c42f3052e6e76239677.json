{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst CID = require('cids');\n\nconst {\n  DAGNode\n} = require('ipld-dag-pb');\n\nconst SendOneFile = require('../utils/send-one-file');\n\nconst once = require('once');\n\nmodule.exports = send => {\n  const sendOneFile = SendOneFile(send, 'object/put');\n  return promisify((obj, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options;\n      options = {};\n    }\n\n    const callback = once(_callback);\n\n    if (!options) {\n      options = {};\n    }\n\n    let tmpObj = {\n      Data: null,\n      Links: []\n    };\n\n    if (Buffer.isBuffer(obj)) {\n      if (!options.enc) {\n        tmpObj = {\n          Data: obj.toString(),\n          Links: []\n        };\n      }\n    } else if (DAGNode.isDAGNode(obj)) {\n      tmpObj = {\n        Data: obj.data.toString(),\n        Links: obj.links.map(l => {\n          const link = l.toJSON();\n          link.hash = link.cid;\n          return link;\n        })\n      };\n    } else if (typeof obj === 'object') {\n      tmpObj.Data = obj.Data.toString();\n      tmpObj.Links = obj.Links;\n    } else {\n      return callback(new Error('obj not recognized'));\n    }\n\n    let buf;\n\n    if (Buffer.isBuffer(obj) && options.enc) {\n      buf = obj;\n    } else {\n      buf = Buffer.from(JSON.stringify(tmpObj));\n    }\n\n    const enc = options.enc || 'json';\n    const sendOptions = {\n      qs: {\n        inputenc: enc\n      }\n    };\n    sendOneFile(buf, sendOptions, (err, result) => {\n      if (err) {\n        return callback(err); // early\n      }\n\n      callback(null, new CID(result.Hash));\n    });\n  });\n};","map":{"version":3,"sources":["D:/BE COMP SS/Final Year Project/5/land2/land2/client/node_modules/ipfs-http-client/src/object/put.js"],"names":["promisify","require","CID","DAGNode","SendOneFile","once","module","exports","send","sendOneFile","obj","options","_callback","callback","tmpObj","Data","Links","Buffer","isBuffer","enc","toString","isDAGNode","data","links","map","l","link","toJSON","hash","cid","Error","buf","from","JSON","stringify","sendOptions","qs","inputenc","err","result","Hash"],"mappings":"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","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst CID = require('cids')\nconst { DAGNode } = require('ipld-dag-pb')\n\nconst SendOneFile = require('../utils/send-one-file')\nconst once = require('once')\n\nmodule.exports = (send) => {\n  const sendOneFile = SendOneFile(send, 'object/put')\n\n  return promisify((obj, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options\n      options = {}\n    }\n\n    const callback = once(_callback)\n\n    if (!options) {\n      options = {}\n    }\n\n    let tmpObj = {\n      Data: null,\n      Links: []\n    }\n\n    if (Buffer.isBuffer(obj)) {\n      if (!options.enc) {\n        tmpObj = {\n          Data: obj.toString(),\n          Links: []\n        }\n      }\n    } else if (DAGNode.isDAGNode(obj)) {\n      tmpObj = {\n        Data: obj.data.toString(),\n        Links: obj.links.map((l) => {\n          const link = l.toJSON()\n          link.hash = link.cid\n          return link\n        })\n      }\n    } else if (typeof obj === 'object') {\n      tmpObj.Data = obj.Data.toString()\n      tmpObj.Links = obj.Links\n    } else {\n      return callback(new Error('obj not recognized'))\n    }\n\n    let buf\n    if (Buffer.isBuffer(obj) && options.enc) {\n      buf = obj\n    } else {\n      buf = Buffer.from(JSON.stringify(tmpObj))\n    }\n    const enc = options.enc || 'json'\n\n    const sendOptions = {\n      qs: { inputenc: enc }\n    }\n\n    sendOneFile(buf, sendOptions, (err, result) => {\n      if (err) {\n        return callback(err) // early\n      }\n\n      callback(null, new CID(result.Hash))\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}