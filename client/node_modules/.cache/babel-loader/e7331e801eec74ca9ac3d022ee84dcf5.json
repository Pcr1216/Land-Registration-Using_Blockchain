{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst dagPB = require('ipld-dag-pb');\n\nconst DAGNode = dagPB.DAGNode;\nconst DAGLink = dagPB.DAGLink;\n\nconst CID = require('cids');\n\nconst LRU = require('lru-cache');\n\nconst lruOptions = {\n  max: 128\n};\nconst cache = new LRU(lruOptions);\n\nmodule.exports = send => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    let cidB58Str;\n\n    try {\n      cid = new CID(cid);\n      cidB58Str = cid.toBaseEncodedString();\n    } catch (err) {\n      return callback(err);\n    }\n\n    const node = cache.get(cidB58Str);\n\n    if (node) {\n      return callback(null, node);\n    }\n\n    send({\n      path: 'object/get',\n      args: cidB58Str,\n      qs: {\n        'data-encoding': 'base64'\n      }\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      result.Data = Buffer.from(result.Data, 'base64');\n      const links = result.Links.map(l => {\n        return new DAGLink(l.Name, l.Size, l.Hash);\n      });\n      DAGNode.create(result.Data, links, (err, node) => {\n        if (err) {\n          return callback(err);\n        }\n\n        cache.set(cidB58Str, node);\n        callback(null, node);\n      });\n    });\n  });\n};","map":{"version":3,"sources":["D:/BE COMP SS/Final Year Project/5/land2/land2/client/node_modules/ipfs-http-client/src/object/get.js"],"names":["promisify","require","dagPB","DAGNode","DAGLink","CID","LRU","lruOptions","max","cache","module","exports","send","cid","options","callback","cidB58Str","toBaseEncodedString","err","node","get","path","args","qs","result","Data","Buffer","from","links","Links","map","l","Name","Size","Hash","create","set"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAArB;;AACA,MAAME,OAAO,GAAGD,KAAK,CAACC,OAAtB;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACE,OAAtB;;AACA,MAAMC,GAAG,GAAGJ,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMK,GAAG,GAAGL,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMM,UAAU,GAAG;AACjBC,EAAAA,GAAG,EAAE;AADY,CAAnB;AAIA,MAAMC,KAAK,GAAG,IAAIH,GAAJ,CAAQC,UAAR,CAAd;;AAEAG,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAOZ,SAAS,CAAC,CAACa,GAAD,EAAMC,OAAN,EAAeC,QAAf,KAA4B;AAC3C,QAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,MAAAA,QAAQ,GAAGD,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AAED,QAAI,CAACA,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAG,EAAV;AACD;;AAED,QAAIE,SAAJ;;AAEA,QAAI;AACFH,MAAAA,GAAG,GAAG,IAAIR,GAAJ,CAAQQ,GAAR,CAAN;AACAG,MAAAA,SAAS,GAAGH,GAAG,CAACI,mBAAJ,EAAZ;AACD,KAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,aAAOH,QAAQ,CAACG,GAAD,CAAf;AACD;;AAED,UAAMC,IAAI,GAAGV,KAAK,CAACW,GAAN,CAAUJ,SAAV,CAAb;;AAEA,QAAIG,IAAJ,EAAU;AACR,aAAOJ,QAAQ,CAAC,IAAD,EAAOI,IAAP,CAAf;AACD;;AAEDP,IAAAA,IAAI,CAAC;AACHS,MAAAA,IAAI,EAAE,YADH;AAEHC,MAAAA,IAAI,EAAEN,SAFH;AAGHO,MAAAA,EAAE,EAAE;AACF,yBAAiB;AADf;AAHD,KAAD,EAMD,CAACL,GAAD,EAAMM,MAAN,KAAiB;AAClB,UAAIN,GAAJ,EAAS;AACP,eAAOH,QAAQ,CAACG,GAAD,CAAf;AACD;;AAEDM,MAAAA,MAAM,CAACC,IAAP,GAAcC,MAAM,CAACC,IAAP,CAAYH,MAAM,CAACC,IAAnB,EAAyB,QAAzB,CAAd;AAEA,YAAMG,KAAK,GAAGJ,MAAM,CAACK,KAAP,CAAaC,GAAb,CAAkBC,CAAD,IAAO;AACpC,eAAO,IAAI3B,OAAJ,CAAY2B,CAAC,CAACC,IAAd,EAAoBD,CAAC,CAACE,IAAtB,EAA4BF,CAAC,CAACG,IAA9B,CAAP;AACD,OAFa,CAAd;AAIA/B,MAAAA,OAAO,CAACgC,MAAR,CAAeX,MAAM,CAACC,IAAtB,EAA4BG,KAA5B,EAAmC,CAACV,GAAD,EAAMC,IAAN,KAAe;AAChD,YAAID,GAAJ,EAAS;AACP,iBAAOH,QAAQ,CAACG,GAAD,CAAf;AACD;;AACDT,QAAAA,KAAK,CAAC2B,GAAN,CAAUpB,SAAV,EAAqBG,IAArB;AACAJ,QAAAA,QAAQ,CAAC,IAAD,EAAOI,IAAP,CAAR;AACD,OAND;AAOD,KAxBG,CAAJ;AAyBD,GAlDe,CAAhB;AAmDD,CApDD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst dagPB = require('ipld-dag-pb')\nconst DAGNode = dagPB.DAGNode\nconst DAGLink = dagPB.DAGLink\nconst CID = require('cids')\nconst LRU = require('lru-cache')\nconst lruOptions = {\n  max: 128\n}\n\nconst cache = new LRU(lruOptions)\n\nmodule.exports = (send) => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    if (!options) {\n      options = {}\n    }\n\n    let cidB58Str\n\n    try {\n      cid = new CID(cid)\n      cidB58Str = cid.toBaseEncodedString()\n    } catch (err) {\n      return callback(err)\n    }\n\n    const node = cache.get(cidB58Str)\n\n    if (node) {\n      return callback(null, node)\n    }\n\n    send({\n      path: 'object/get',\n      args: cidB58Str,\n      qs: {\n        'data-encoding': 'base64'\n      }\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      result.Data = Buffer.from(result.Data, 'base64')\n\n      const links = result.Links.map((l) => {\n        return new DAGLink(l.Name, l.Size, l.Hash)\n      })\n\n      DAGNode.create(result.Data, links, (err, node) => {\n        if (err) {\n          return callback(err)\n        }\n        cache.set(cidB58Str, node)\n        callback(null, node)\n      })\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}