{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst assert = require('assert');\n\nconst withIs = require('class-is'); // Link represents an IPFS Merkle DAG Link between Nodes.\n\n\nclass DAGLink {\n  constructor(name, size, cid) {\n    assert(cid, 'A link requires a cid to point to'); // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || '';\n    this._nameBuf = null;\n    this._size = size;\n    this._cid = new CID(cid);\n  }\n\n  toString() {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.name}\", size: ${this.size}>`;\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.name,\n        size: this.size,\n        cid: this._cid.toBaseEncodedString()\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  get name() {\n    return this._name;\n  } // Memoize the Buffer representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new buffers every time\n\n\n  get nameAsBuffer() {\n    if (this._nameBuf !== null) {\n      return this._nameBuf;\n    }\n\n    this._nameBuf = Buffer.from(this._name);\n    return this._nameBuf;\n  }\n\n  set name(name) {\n    throw new Error(\"Can't set property: 'name' is immutable\");\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n  get cid() {\n    return this._cid;\n  }\n\n  set cid(cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGLink, {\n  className: 'DAGLink',\n  symbolName: '@ipld/js-ipld-dag-pb/daglink'\n});\nexports.create = require('./create');\nexports.util = require('./util');","map":{"version":3,"sources":["D:/BE COMP SS/Final Year Project/5/land2/land2/client/node_modules/ipld-dag-pb/src/dag-link/index.js"],"names":["CID","require","assert","withIs","DAGLink","constructor","name","size","cid","_name","_nameBuf","_size","_cid","toString","toBaseEncodedString","toJSON","_json","Object","freeze","assign","nameAsBuffer","Buffer","from","Error","exports","module","className","symbolName","create","util"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB,C,CAEA;;;AACA,MAAMG,OAAN,CAAc;AACZC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,IAAR,EAAcC,GAAd,EAAmB;AAC5BN,IAAAA,MAAM,CAACM,GAAD,EAAM,mCAAN,CAAN,CAD4B,CAE5B;AACA;AACA;;AAEA,SAAKC,KAAL,GAAaH,IAAI,IAAI,EAArB;AACA,SAAKI,QAAL,GAAgB,IAAhB;AACA,SAAKC,KAAL,GAAaJ,IAAb;AACA,SAAKK,IAAL,GAAY,IAAIZ,GAAJ,CAAQQ,GAAR,CAAZ;AACD;;AAEDK,EAAAA,QAAQ,GAAI;AACV,WAAQ,YAAW,KAAKD,IAAL,CAAUE,mBAAV,EAAgC,aAAY,KAAKR,IAAK,YAAW,KAAKC,IAAK,GAA9F;AACD;;AAEDQ,EAAAA,MAAM,GAAI;AACR,QAAI,CAAC,KAAKC,KAAV,EAAiB;AACf,WAAKA,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc;AACzBZ,QAAAA,IAAI,EAAE,KAAKA,IADc;AAEzBC,QAAAA,IAAI,EAAE,KAAKA,IAFc;AAGzBC,QAAAA,GAAG,EAAE,KAAKI,IAAL,CAAUE,mBAAV;AAHoB,OAAd,CAAb;AAKD;;AAED,WAAOG,MAAM,CAACE,MAAP,CAAc,EAAd,EAAkB,KAAKH,KAAvB,CAAP;AACD;;AAEO,MAAJV,IAAI,GAAI;AACV,WAAO,KAAKG,KAAZ;AACD,GA/BW,CAiCZ;AACA;AACA;;;AACgB,MAAZW,YAAY,GAAI;AAClB,QAAI,KAAKV,QAAL,KAAkB,IAAtB,EAA4B;AAC1B,aAAO,KAAKA,QAAZ;AACD;;AAED,SAAKA,QAAL,GAAgBW,MAAM,CAACC,IAAP,CAAY,KAAKb,KAAjB,CAAhB;AACA,WAAO,KAAKC,QAAZ;AACD;;AAEO,MAAJJ,IAAI,CAAEA,IAAF,EAAQ;AACd,UAAM,IAAIiB,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEO,MAAJhB,IAAI,GAAI;AACV,WAAO,KAAKI,KAAZ;AACD;;AAEO,MAAJJ,IAAI,CAAEA,IAAF,EAAQ;AACd,UAAM,IAAIgB,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEM,MAAHf,GAAG,GAAI;AACT,WAAO,KAAKI,IAAZ;AACD;;AAEM,MAAHJ,GAAG,CAAEA,GAAF,EAAO;AACZ,UAAM,IAAIe,KAAJ,CAAU,wCAAV,CAAN;AACD;;AA/DW;;AAkEdC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBrB,MAAM,CAACC,OAAD,EAAU;AAAEsB,EAAAA,SAAS,EAAE,SAAb;AAAwBC,EAAAA,UAAU,EAAE;AAApC,CAAV,CAAjC;AACAH,OAAO,CAACI,MAAR,GAAiB3B,OAAO,CAAC,UAAD,CAAxB;AACAuB,OAAO,CAACK,IAAR,GAAe5B,OAAO,CAAC,QAAD,CAAtB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst assert = require('assert')\nconst withIs = require('class-is')\n\n// Link represents an IPFS Merkle DAG Link between Nodes.\nclass DAGLink {\n  constructor (name, size, cid) {\n    assert(cid, 'A link requires a cid to point to')\n    // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || ''\n    this._nameBuf = null\n    this._size = size\n    this._cid = new CID(cid)\n  }\n\n  toString () {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.name}\", size: ${this.size}>`\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.name,\n        size: this.size,\n        cid: this._cid.toBaseEncodedString()\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  get name () {\n    return this._name\n  }\n\n  // Memoize the Buffer representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new buffers every time\n  get nameAsBuffer () {\n    if (this._nameBuf !== null) {\n      return this._nameBuf\n    }\n\n    this._nameBuf = Buffer.from(this._name)\n    return this._nameBuf\n  }\n\n  set name (name) {\n    throw new Error(\"Can't set property: 'name' is immutable\")\n  }\n\n  get size () {\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get cid () {\n    return this._cid\n  }\n\n  set cid (cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGLink, { className: 'DAGLink', symbolName: '@ipld/js-ipld-dag-pb/daglink' })\nexports.create = require('./create')\nexports.util = require('./util')\n"]},"metadata":{},"sourceType":"script"}